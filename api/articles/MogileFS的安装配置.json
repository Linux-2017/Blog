{"title":"MogileFS的安装配置","slug":"MogileFS的安装配置","date":"2017-06-12T13:28:08.000Z","updated":"2017-11-19T13:15:37.000Z","comments":true,"excerpt":"","content":"<h2 id=\"MogileFS的安装配置\"><a href=\"#MogileFS的安装配置\" class=\"headerlink\" title=\"MogileFS的安装配置\"></a>MogileFS的安装配置</h2><p><strong>该项目托管在github之上，地址为<a href=\"https://github.com/hachi\" target=\"_blank\" rel=\"noopener\">https://github.com/hachi</a></strong></p>\n<h3 id=\"MogileFS由3个部分组成：\"><a href=\"#MogileFS由3个部分组成：\" class=\"headerlink\" title=\"MogileFS由3个部分组成：\"></a>MogileFS由3个部分组成：</h3><ol>\n<li>server：主要包括mogilefsd和mogstored两个应用程序。mogilefsd实现的是tracker，它通过数据库来保存元数据信息，包括站点doman、class、host等；mogstored是存储节点(store node),它其实是个WebDAV服务，默认监听在7500端口，接受客户端的文件存储请求。在MogileFS安装完后，要运行mogadm工具将所有的store node注册到mogilefsd的数据库里，mogilefsd会对这些节点进行管理和监控。</li>\n<li>utiles（工具集）：主要是MofileFS的一些管理工具，例如mogadm等。</li>\n<li>客户端API：MogileFS的客户端API很多，例如Perl、PHP、Java、Python等，用这个模块可以编写客户端程序，实现文件的备份管理功能等。</li>\n</ol>\n<p>存储主机（节点）<br>这个是MogileFS存储文件存放在这些机器上，也是mogstored节点，也叫Storage Server，每一台存储主要都要启动一个mogstored服务，扩容就是增加这些机器。</p>\n<p>设备（device）<br>一个存储节点，可以有多个device，就是用来存放文件的目录（例如挂载的目录），每个设备都有一个设备id，需要在mogstored的配置文件中的docroot配置的项目，指定的目录下面创建相应的设备的目录，目录名为\\$docroot/dev\\$id,设备是不能删除的，只能将其设备的状态值为dead，当一个设备dead之后，里面的数据无法恢复，且这个dead了的设备id也将不能用了。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>实验环境为4台centos6.8，分别配置epel源，时间已经同步，且防护墙、selinux已关闭。</p>\n<p><strong>拓扑</strong><br>nginx反代、tracker以及mysq都在<br>172.18.50.61</p>\n<p>3台storage node<br>172.18.50.62<br>172.18.50.63<br>172.18.50.64</p>\n<h4 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p>为了节省时间，这里在61主机上使用ansible进行配置<br>ansible的hosts配置为<br>[my]<br>172.18.50.61<br>[mgs]<br>172.18.50.62<br>172.18.50.63<br>172.18.50.64</p>\n<p>安装perl环境</p>\n<pre><code>ansible all -m shell -a &#39;yum install perl-Net-Netmask perl-IO-stringy perl-Sys-Syslog perl-IO-AIO&#39;\n</code></pre><p>准备mogilefs文件<br>[root@61 rpm]# ls /root/rpm<br>MogileFS-Server-2.46-2.el6.noarch.rpm            perl-Danga-Socket-1.61-1.el6.rf.noarch.rpm<br>MogileFS-Server-mogilefsd-2.46-2.el6.noarch.rpm  perl-IO-stringy-2.110-1.2.el6.rfx.noarch.rpm<br>MogileFS-Server-mogstored-2.46-2.el6.noarch.rpm  perl-MogileFS-Client-1.14-1.el6.noarch.rpm<br>MogileFS-Utils-2.19-1.el6.noarch.rpm             perl-Net-Netmask-1.9015-8.el6.noarch.rpm<br>Perlbal-1.78-1.el6.noarch.rpm                    perl-Perlbal-1.78-1.el6.noarch.rpm<br>Perlbal-doc-1.78-1.el6.noarch.rpm</p>\n<p>将这些文件推送至store node</p>\n<pre><code>[root@61 ~]# cat copy.yml \n---\n\n- hosts: mgs\n  remote_user: root\n  tasks:\n  - name: COPY\n    copy: src=/root/rpm dest=/tmp\n</code></pre><p>copy模块依赖libselinux，所以</p>\n<pre><code>ansible all -m shell -a &#39;yum -y install libselinux-python&#39;\n</code></pre><p>coppy</p>\n<pre><code>ansible-playbook copy.yml\n</code></pre><p>安装mogilefs</p>\n<pre><code>yum install rpm/*.rpm -y\nansible mfs -m shell -a &#39;yum -y install /tmp/rpm/*.rpm&#39;\n</code></pre><p>在store node上创建数据存放目录并修改属主</p>\n<pre><code>ansible mgs -m shell -a &#39;mkdir -pv /var/mogdata&#39;\nansible mgs -m shell  -a &quot;chown -R mogilefs.mogilefs /var/mogdata&quot;\n</code></pre><p>配置tracker</p>\n<pre><code>[root@61 ~]# cat /etc/mogilefs/mogilefsd.conf | grep -v &quot;^#&quot;\ndaemonize = 1\npidfile = /var/run/mogilefsd/mogilefsd.pid\ndb_dsn = DBI:mysql:mogilefs:host=127.0.0.1  #mysql地址\ndb_user = mogile\ndb_pass = password\nlisten = 127.0.0.1:7001\nconf_port = 7001\nquery_jobs = 10\ndelete_jobs = 1\nreplicate_jobs = 5\nreaper_jobs = 1\n</code></pre><p>mysql相关配置</p>\n<pre><code>yum -y install mysql-server\nservice mysqld start \nmysql&gt;grant all privileges on *.* to mogile@&#39;172.18.50.%&#39; identified by &#39;password&#39;;\nmysql&gt;grant all privileges on *.* to mogile@&#39;localhost&#39; identified by &#39;password&#39;;\nmysql&gt;flush privileges;\n</code></pre><p>初始化数据库,这个过程会自动创建数据库并授权，但是允许的主机为%，不安全，可以在授权完成后修改为指定ip。</p>\n<pre><code>mogdbsetup --dbhost=127.0.0.1 --dbpass=password\n</code></pre><p>启动mogilefsd</p>\n<pre><code>su mogilefs -c &quot;mogilefsd -c /etc/mogilefs/mogilefsd.conf --daemon&quot;\n</code></pre><p>启动mogstored并检查是否启动成功</p>\n<pre><code>ansible mgs -m shell -a &#39;mogstored -daemon&#39;\n[root@61 ~]# ansible mgs -m shell -a &quot;ss -ntl&quot;\n172.18.50.62 | SUCCESS | rc=0 &gt;&gt;\nState      Recv-Q Send-Q        Local Address:Port          Peer Address:Port \nLISTEN     0      128                       *:7500                     *:*     \nLISTEN     0      128                       *:7501                     *:*     \nLISTEN     0      128                      :::22                      :::*     \nLISTEN     0      128                       *:22                       *:*     \nLISTEN     0      100                     ::1:25                      :::*     \nLISTEN     0      100               127.0.0.1:25                       *:*     \n\n172.18.50.64 | SUCCESS | rc=0 &gt;&gt;\nState      Recv-Q Send-Q        Local Address:Port          Peer Address:Port \nLISTEN     0      128                       *:7500                     *:*     \nLISTEN     0      128                       *:7501                     *:*     \nLISTEN     0      128                      :::22                      :::*     \nLISTEN     0      128                       *:22                       *:*     \nLISTEN     0      100                     ::1:25                      :::*     \nLISTEN     0      100               127.0.0.1:25                       *:*     \n\n172.18.50.63 | SUCCESS | rc=0 &gt;&gt;\nState      Recv-Q Send-Q        Local Address:Port          Peer Address:Port \nLISTEN     0      128                       *:7500                     *:*     \nLISTEN     0      128                       *:7501                     *:*     \nLISTEN     0      128                      :::22                      :::*     \nLISTEN     0      128                       *:22                       *:*     \nLISTEN     0      100                     ::1:25                      :::*     \nLISTEN     0      100               127.0.0.1:25                       *:*\n</code></pre><p>添加host</p>\n<pre><code>mogadm host add node1 --ip=172.18.50.62 --port=7500 --status=alive\nmogadm host add node2 --ip=172.18.50.63 --port=7500 --status=alive\nmogadm host add node3 --ip=172.18.50.64 --port=7500 --status=alive\n</code></pre><p>添加device，这里需要在三台store node的数据目录分别建立dev1-3</p>\n<pre><code>mogadm device add node1 1\nmogadm device add node2 2\nmogadm device add node3 3\n</code></pre><p>查看空间是否正常，如果没空间，一般是iptables或文件权限问题</p>\n<pre><code>[root@61 ~]# mogadm  device list\nnode1 [1]: alive\n                    used(G)    free(G)   total(G)  weight(%)\n   dev1:   alive      1.104     10.923     12.027        100\n\nnode2 [2]: alive\n                    used(G)    free(G)   total(G)  weight(%)\n   dev2:   alive      1.132     10.896     12.027        100\n\nnode3 [3]: alive\n                    used(G)    free(G)   total(G)  weight(%)\n   dev3:   alive      1.132     10.896     12.027        100\n</code></pre><p>添加images</p>\n<pre><code>mogadm domain add images\nmogadm domian add file\n</code></pre><p>添加class,这里可以用 –mindevcount=i 指定上传文件的mindevcount</p>\n<pre><code>mogadm class add images png\nmogadm class add images png\n</code></pre><p>上传文件</p>\n<pre><code>[root@61 ~]# mogupload  --trackers=127.0.0.1 --domain=images --key=&#39;test.jpg&#39; --file=&#39;/usr/share/backgrounds/simple_waves.jpg&#39;\n[root@61 ~]# mogfileinfo --trackers=127.0.0.1 --domain=images --key=&#39;test.jpg&#39; \n- file: test.jpg\n     class:              default\n  devcount:                    2\n    domain:               images\n       fid:                    5\n       key:             test.jpg\n    length:               931957\n - http://172.18.50.63:7500/dev2/0/000/000/0000000005.fid\n - http://172.18.50.64:7500/dev3/0/000/000/0000000005.fid\n</code></pre><p>####使用Nginx 做为 MogileFS 的前端客户端<br>这里使用nginx1.10.3</p>\n<pre><code>tar -xvf nginx-1.10.3.tar.gz\nyum -y install git pcre-devel openssl-devel\ngit clone https://github.com/vkholodkov/nginx-mogilefs-module.git\ncd nginx.1.10.3\n ./configure   --prefix=/usr   --sbin-path=/usr/sbin/nginx   --conf-path=/etc/nginx/nginx.conf   --error-log-path=/var/log/nginx/error.log   --http-log-path=/var/log/nginx/access.log   --pid-path=/var/run/nginx/nginx.pid    --lock-path=/var/lock/nginx.lock   --user=nginx   --group=nginx   --with-http_ssl_module   --with-http_flv_module   --with-http_stub_status_module   --with-http_gzip_static_module   --http-client-body-temp-path=/var/tmp/nginx/client/   --http-proxy-temp-path=/var/tmp/nginx/proxy/   --http-fastcgi-temp-path=/var/tmp/nginx/fcgi/   --http-uwsgi-temp-path=/var/tmp/nginx/uwsgi   --http-scgi-temp-path=/var/tmp/nginx/scgi   --with-pcre   --with-debug   --add-module=/root/nginx-mogilefs-module\nmake &amp;&amp; make install\n有些版本make不成功可以使用make CFLAGS=&quot;-pipe  -O -W -Wall -Wpointer-arith -Wno-unused-parameter -g&quot;\n</code></pre><p>这nginx配置文件中加入location进行反代</p>\n<pre><code>vim /etc/nginx/nginx.conf\n        location /imgs/ {\n            mogilefs_tracker 127.0.0.1:7001;\n            mogilefs_domain images;\n#           mogilefs_class png jpg;\n\n            mogilefs_pass {\n                proxy_pass $mogilefs_path;\n                proxy_hide_header Content-Type;\n                proxy_buffering off;\n            }\n        }\n</code></pre><h4 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h4><hr>\n<p><img src=\"http://omsab2via.bkt.clouddn.com/mogilefs.png\" alt=\"enter image description here\"></p>\n<p>最后附几个unit脚本<br>nginx</p>\n<pre><code>#!/bin/sh\n#\n# nginx - this script starts and stops the nginx daemon\n#\n# chkconfig:   - 85 15 \n# description:  Nginx is an HTTP(S) server, HTTP(S) reverse \\\n#               proxy and IMAP/POP3 proxy server\n# processname: nginx\n# config:      /etc/nginx/nginx.conf\n# config:      /etc/sysconfig/nginx\n# pidfile:     /var/run/nginx.pid\n\n# Source function library.\n. /etc/rc.d/init.d/functions\n\n# Source networking configuration.\n. /etc/sysconfig/network\n\n# Check that networking is up.\n[ &quot;$NETWORKING&quot; = &quot;no&quot; ] &amp;&amp; exit 0\n\nnginx=&quot;/usr/sbin/nginx&quot;\nprog=$(basename $nginx)\n\nNGINX_CONF_FILE=&quot;/etc/nginx/nginx.conf&quot;\n\n[ -f /etc/sysconfig/nginx ] &amp;&amp; . /etc/sysconfig/nginx\n\nlockfile=/var/lock/subsys/nginx\n\nmake_dirs() {\n   # make required directories\n   user=`nginx -V 2&gt;&amp;1 | grep &quot;configure arguments:&quot; | sed &#39;s/[^*]*--user=\\([^ ]*\\).*/\\1/g&#39; -`\n   options=`$nginx -V 2&gt;&amp;1 | grep &#39;configure arguments:&#39;`\n   for opt in $options; do\n       if [ `echo $opt | grep &#39;.*-temp-path&#39;` ]; then\n           value=`echo $opt | cut -d &quot;=&quot; -f 2`\n           if [ ! -d &quot;$value&quot; ]; then\n               # echo &quot;creating&quot; $value\n               mkdir -p $value &amp;&amp; chown -R $user $value\n           fi\n       fi\n   done\n}\n\nstart() {\n    [ -x $nginx ] || exit 5\n    [ -f $NGINX_CONF_FILE ] || exit 6\n    make_dirs\n    echo -n $&quot;Starting $prog: &quot;\n    daemon $nginx -c $NGINX_CONF_FILE\n    retval=$?\n    echo\n    [ $retval -eq 0 ] &amp;&amp; touch $lockfile\n    return $retval\n}\n\nstop() {\n    echo -n $&quot;Stopping $prog: &quot;\n    killproc $prog -QUIT\n    retval=$?\n    echo\n    [ $retval -eq 0 ] &amp;&amp; rm -f $lockfile\n    return $retval\n}\n\nrestart() {\n    configtest || return $?\n    stop\n    sleep 1\n    start\n}\n\nreload() {\n    configtest || return $?\n    echo -n $&quot;Reloading $prog: &quot;\n    killproc $nginx -HUP\n    RETVAL=$?\n    echo\n}\n\nforce_reload() {\n    restart\n}\n\nconfigtest() {\n  $nginx -t -c $NGINX_CONF_FILE\n}\n\nrh_status() {\n    status $prog\n}\n\nrh_status_q() {\n    rh_status &gt;/dev/null 2&gt;&amp;1\n}\n\ncase &quot;$1&quot; in\n    start)\n        rh_status_q &amp;&amp; exit 0\n        $1\n        ;;\n    stop)\n        rh_status_q || exit 0\n        $1\n        ;;\n    restart|configtest)\n        $1\n        ;;\n    reload)\n        rh_status_q || exit 7\n        $1\n        ;;\n    force-reload)\n        force_reload\n        ;;\n    status)\n        rh_status\n        ;;\n    condrestart|try-restart)\n        rh_status_q || exit 0\n            ;;\n    *)\n        echo $&quot;Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest}&quot;\n        exit 2\nesac\n</code></pre><p>mogstored</p>\n<pre><code>#!/bin/bash\n#\n# mogstored - Startup script for the MogileFS storage\n#\n# chkconfig: - 86 14\n# description: MogileFS storage \n# processname: mogstored\n# config: /etc/mogilefs/mogstored.conf \n# pidfile: /var/run/mogilefsd/mogstored.pid\n\n# Source function library.\n. /etc/rc.d/init.d/functions\n\n# Path to the apachectl script, server binary, and short-form for messages.\nlockfile=${LOCKFILE-/var/lock/subsys/mogstored} \nRETVAL=0\n\nconfigfile=&#39;/etc/mogilefs/mogstored.conf&#39;\n\nprog=$(which mogstored)\n\nstart() { \n    ulimit -n 65535\n    echo -n $&quot;Starting mogstored&quot;\n    su - mogilefs -c &quot;$prog -c $configfile --daemon&quot;  &amp;&gt; /dev/null\n    RETVAL=$?\n    [ $RETVAL = 0 ] &amp;&amp; success &amp;&amp; touch ${lockfile} || failure\n    echo\n    return $RETVAL\n}\n\nstop() {\n    echo -n $&quot;Stopping mogstored&quot; \n    netstat -nlp|grep &quot;mogstored&quot;|grep -v grep|awk &#39;{print $7}&#39;|awk -F&quot;/&quot; &#39;{print $1}&#39;|xargs kill -9 \n    RETVAL=$?\n    [ $RETVAL = 0 ] &amp;&amp; success &amp;&amp; rm -f ${lockfile} || failure\n    echo\n}\n\nreload() {\n    echo -n $&quot;Reloading mogstored: &quot; \n    killall mogstored -HUP \n    RETVAL=$?\n    [ $RETVAL = 0 ] &amp;&amp; success || failure\n    echo\n}\n\ncase &quot;$1&quot; in\n    start) \n        start\n        ;; \n    stop)\n        stop\n        ;; \n    status) \n        status mogstored \n        RETVAL=$?\n        ;;\n    restart)\n        stop\n        sleep 1\n        start\n        ;;\n    reload)\n        reload\n        ;; \n    *) \n        echo $&quot;Usage: mogstored {start|stop|restart|reload|status}&quot; \n        exit 1\nesac\nexit $RETVAL\n</code></pre><p>mogilefsd服务脚本：</p>\n<pre><code>#!/bin/bash\n#\n# mogilefsd - Startup script for the MogileFS tracker\n#\n# chkconfig: - 85 15\n# description: MogileFS tracker \n# processname: mogilefsd\n# config: /etc/mogilefs/mogilefsd.conf \n# pidfile: /var/run/mogilefsd/mogilefsd.pid\n\n# Source function library.\n. /etc/rc.d/init.d/functions\n\n# Path to the apachectl script, server binary, and short-form for messages.\nlockfile=${LOCKFILE-/var/lock/subsys/mogilefsd} \nRETVAL=0\n\nprog=$(which mogilefsd)\n\nstart() { \n    ulimit -n 65535\n    echo -n $&quot;Starting mogilefsd&quot;\n    su - mogilefs -c &quot;$prog -c /etc/mogilefs/mogilefsd.conf --daemon&quot; \n    RETVAL=$?\n    [ $RETVAL = 0 ] &amp;&amp; success &amp;&amp; touch ${lockfile} || failure\n    echo\n    return $RETVAL\n}\n\nstop() {\n    echo -n $&quot;Stopping mogilefsd&quot; \n    netstat -nlp|grep &quot;mogilefsd&quot;|grep -v grep|awk &#39;{print $7}&#39;|awk -F&quot;/&quot; &#39;{print $1}&#39;|xargs kill -9 \n    RETVAL=$?\n    [ $RETVAL = 0 ] &amp;&amp; success &amp;&amp; rm -f ${lockfile} || failure\n    echo\n}\n\nreload() {\n    echo -n $&quot;Reloading mogilefsd: &quot; \n    killall mogilefsd -HUP \n    RETVAL=$?\n    [ $RETVAL = 0 ] &amp;&amp; success || failure\n    echo\n}\n\ncase &quot;$1&quot; in\n    start) \n        start\n        ;; \n    stop)\n        stop\n        ;; \n    status) \n        status mogilefsd \n        RETVAL=$?\n        ;;\n    restart)\n        stop\n        sleep 1\n        start\n        ;;\n    reload)\n        reload\n        ;; \n    *) \n        echo $&quot;Usage: mogilefsd {start|stop|restart|reload|status}&quot; \n        exit 1\nesac\nexit $RETVAL\n</code></pre><p>####另外的两种安装方式</p>\n<pre><code># yum -y install make gcc unzip perl-DBD-MySQL perl perl-CPAN perl-YAML perl-Time-HiRes\n# cpan \nApp::cpanminus \nMogileFS::Server \nMogileFS::Utils \nIO::AIO \nIO::WrapTie \nDanga::Socket\n#2\ncpanm安装\nwget http://xrl.us/cpanm -O /usr/bin/cpanm; sudo chmod +x /usr/bin/cpanm\n#cpanm DBD::mysql\n#cpanm MogileFS::Server\n#cpanm MogileFS::Utils\n#cpanm MogileFS::Client\n# cpan -i App::cpanminus\ncpan&gt; install App:cpanminus\n</code></pre>","categories":[],"tags":[{"name":"MogileFS","path":"api/tags/MogileFS.json"}]}