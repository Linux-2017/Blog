{"title":"nginx配置及调优","slug":"Nginx配置及优化","date":"2017-05-14T07:42:51.000Z","updated":"2017-11-19T13:15:37.000Z","comments":true,"excerpt":"","content":"<h3 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a><strong>Nginx</strong></h3><h4 id=\"配置文件的组成部分\"><a href=\"#配置文件的组成部分\" class=\"headerlink\" title=\"配置文件的组成部分\"></a>配置文件的组成部分</h4><ul>\n<li><p>主配置文件:/nginx.conf</p>\n<p>include conf.d/*.conf</p>\n</li>\n<li><p>fastcgi,uwsgi,scgi等协议相关的配置文件</p>\n</li>\n<li><p>mime.type:支持的mime类型</p>\n</li>\n</ul>\n<h4 id=\"主配置文件结构\"><a href=\"#主配置文件结构\" class=\"headerlink\" title=\"主配置文件结构\"></a>主配置文件结构</h4><ul>\n<li>main block:这里配置影响nginx全局的指令。一般有运行nginx服务器的用户组，nginx进程pid存放路径，日志存放路径，配置文件引入，允许生成worker process数等。</li>\n<li>events block:配置影响nginx服务器与用户的网络连接。有每个进程的最大连接数，选取那种事件驱动模型处理连接请求，是否允许同时接受多个网络连接，开启网络连接序列化等。</li>\n<li>http block:可以嵌套多个server,配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。如文件引入，mime-type定义，日志自定义，是否使用sendfile传输文件，连接超时时间，但连接请求数等。</li>\n<li>server block:配置虚拟主机相关参数</li>\n<li>location block:配置请求的路由，以及各种页面的处理情况。</li>\n</ul>\n<h4 id=\"配置指令\"><a href=\"#配置指令\" class=\"headerlink\" title=\"配置指令\"></a>配置指令</h4><ul>\n<li><h6 id=\"main配置段常见的指令\"><a href=\"#main配置段常见的指令\" class=\"headerlink\" title=\"main配置段常见的指令\"></a>main配置段常见的指令</h6><blockquote>\n<p>分类</p>\n</blockquote>\n<ul>\n<li>正常运行必备的配置</li>\n<li>优化性能相关的配置</li>\n<li>用于调试及定位问题相关的配置</li>\n<li>事件驱动相关的配置</li>\n</ul>\n<blockquote>\n<p>正常运行必备的配置</p>\n</blockquote>\n<ul>\n<li><p>user</p>\n<pre><code>Syntax: user user [group]\nDefault: user nobody nobody\nCentext: main\n</code></pre></li>\n<li><p>pid /PATH/TO/PID_FILE</p>\n<p>​    指定存储nginx主进程进程号码文件路径</p>\n</li>\n<li><p>include file | mask</p>\n<p>​    指明包含进来的其他配置文件片段</p>\n</li>\n<li><p>load_module file</p>\n<p>​    指明要装载的动态模块</p>\n</li>\n</ul>\n<blockquote>\n<p>性能优化的相关配置</p>\n</blockquote>\n<ul>\n<li><p>worker_processes number|auto;</p>\n<p>​    worker进程的数量;通常应该为当前主机的cpu的物理核心数;</p>\n</li>\n<li><p>worker_cpu_affinity cpumask …;</p>\n<p>​    worker_cpu_affinity auto [cpumask];</p>\n<p>​    CPU MASK:</p>\n<p>​        0001    0号cpu</p>\n<p>​        0010    1号cpu</p>\n<p>​        …</p>\n</li>\n<li><p>worker_priority number</p>\n<p>​    指明worker进程的nice值，设定worker进程优先级;[-20,20]</p>\n</li>\n<li><p>worker_rlimit_nofile number;</p>\n<p>​    worker进程所能够打开的文件数量上限</p>\n</li>\n</ul>\n<blockquote>\n<p>调试、定位问题</p>\n</blockquote>\n<ul>\n<li><p>daemon on|off</p>\n<p>​    是否以守护进程方式运行Nginx</p>\n</li>\n<li><p>master_process on|off</p>\n<p>​    是否以master/worker模型运行nginx;默认为On;</p>\n</li>\n<li><p>error_log file [level]</p>\n</li>\n</ul>\n<blockquote>\n<p>事件驱动相关的配置</p>\n</blockquote>\n<p>​    events {</p>\n<p>​        …</p>\n<p>​    }</p>\n<ul>\n<li><p>worker_connections  * worker_connections</p>\n<p>​    每个worker进程所能够打开的最大并发连接数数量</p>\n</li>\n<li><p>use method</p>\n<p>​    指明并发连接请求的处理方法</p>\n<p>​    use epoll;</p>\n</li>\n<li><p>accept_mutex on | off</p>\n<p>​    处理新的连接请求的方法;on意味者由各种worker轮流处理新请求,off意味者每个新请求的到达都会通知所有的worker进程</p>\n</li>\n</ul>\n</li>\n<li><h6 id=\"http协议的相关配置\"><a href=\"#http协议的相关配置\" class=\"headerlink\" title=\"http协议的相关配置\"></a><strong>http协议的相关配置</strong></h6><ul>\n<li><p>配置一个虚拟主机</p>\n<pre><code>server {\n      listen address[:PORT] | PORT;\n      server_name SERVERNAME;\n      root /PATH/TO/DOCUMENT_ROOT;\n}\n</code></pre></li>\n<li><p>listen PORT|address[:port]|unix:/PATH/TO/SOCKET_FILE</p>\n<p>​    listem address[:port] [default_server]  [ssl]  [http2 | spdy]  [backlog=number]  [rcvbuf=size]  [sndbuf=size]</p>\n<p>default_server:设定为默认虚拟主机</p>\n<p>ssl:限制仅能够通过ssl连接提供服务</p>\n<p>backlog=number:后援队列长度</p>\n<p>rvbuf=size:接收缓冲区大小</p>\n<p>sndbuf=size:发送缓冲区大小</p>\n</li>\n<li><p>server_name name …</p>\n<p>​    指明虚拟主机的主机名称;后可根多个空白字符分割的字符串</p>\n<p>​        支持<em>通配任意长度的任意字符;例如:server_name  </em>.domain.com</p>\n<p>​        支持~起始的字符做正则表达式模式匹配;server_name  ~^www\\d.domain.com$</p>\n<p>匹配机制:</p>\n<p>​     字符串精确匹配–&gt;左侧*通配符–&gt;右侧*匹配–&gt;正则表达式</p>\n</li>\n<li><p>tcp_nodelay on | off</p>\n<p>​    在keepalived模式下的连接是否启用TCP——NODELAY选项</p>\n</li>\n<li><p>sendfile on | off</p>\n<p>​    是否启用sendfile功能</p>\n</li>\n</ul>\n<blockquote>\n<p>定义路径相关的配置</p>\n</blockquote>\n<ul>\n<li><p>root path</p>\n<p>​    设置web资源路径映射;用于指明用户请求的url所对应的本地文件系统上的文档所在目录路径;可用的位置:http,server,location,if in location;</p>\n</li>\n<li><p>location [ = | ~ | ~* | ^~ | url ] uri {…}</p>\n<blockquote>\n<p>在一个server中location配置段可存在多个，用于实现从uri到文件系统的路径映射;nginx会根据用户请求URI来检查定义所有location，并找出一个最佳匹配，而后应用其配置;</p>\n</blockquote>\n<p>=    对URI做精确匹配</p>\n<p>~    对URI做正则表达式匹配，区分字符大小写</p>\n<p>~*    对URI做正则表达式匹配，不区分字符大小写</p>\n<p>^~    对URI的做半部分做匹配检查，不区分字符大小写</p>\n<p>不带符号:匹配起始与此uri的所有url;</p>\n<p>匹配优先级:</p>\n<blockquote>\n<p>=    ^~    ~    ~*    不带符号</p>\n</blockquote>\n</li>\n<li><p>alias  path</p>\n<blockquote>\n<p>定义路径别名，文档映射的另一种机制;仅能用于lacation上下文</p>\n</blockquote>\n<p><strong>注意:</strong>lacation中使用root指令和alias指令意义不同</p>\n<p>​    root:给定的路径对应于location中的/uri左侧的/</p>\n<p>​    alias:给定的路径对应于location中的/uri右侧的/</p>\n<p>示例:</p>\n<pre><code>location /img/ {\n    alias /var/www/image/;\n}\n#若按照上述配置的话，当客户端请求访问/img/目录里面的文件时，ningx会自动去/var/www/image/目录找文件\n\nlocation /img/ {\n    root /var/www/image;\n}\n#若按照这种配置的话，则访问/img/目录下的文件时，nginx会去/var/www/image/img/目录下找文件.\n</code></pre></li>\n<li><p>index file …</p>\n<p>默认资源;http,server,location</p>\n</li>\n<li><p>error_page code … [=[response]]  uri</p>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>try_files file … uri    </p>\n<blockquote>\n<p>定义客户端请求的相关配置</p>\n</blockquote>\n<ul>\n<li>keepalive_timeout timeout  [header_timeout]</li>\n</ul>\n<p>​    设定保持连接的超时时长，0表示禁止长连接;默认为75s;</p>\n<ul>\n<li>keepalive_requests number</li>\n</ul>\n<p>​    在一次长连接上所允许请求的资源的最大数量，默认为100;</p>\n<ul>\n<li>keepalive_disable none | browser …;</li>\n</ul>\n<p>​    对哪种浏览器禁用长连接</p>\n<ul>\n<li>send_timeout time;</li>\n</ul>\n<p>​    向客户端发送响应报文的超时时长，此处，是指两次写操作的间隔时长</p>\n<ul>\n<li>client_body_buffer_size size</li>\n</ul>\n<p>​    用于接收客户端请求报文的body部分的缓冲区大小;默认为16k;超出此大小时，其将暂存磁盘上由client_body_temp_path指令所定义的位置</p>\n<ul>\n<li>client_body_temp_path path [level1 [level2  [level3 ]]]</li>\n</ul>\n<p>​    用于设定存储客户端请求报文的body部分的临时存储路径及目录结构和数量;</p>\n<p>​    16进制的数字:</p>\n<p>​    client_body_temp_path path  /var/tmp/client_body  2   1   1</p>\n<p>​        2： 表示一级子目录为2个16为进制数字，也就是256个</p>\n<p>​        1:    表示二级子目录为1个16为进制数字</p>\n<p>​        1:    表示三级子目录为1个16为进制数字</p>\n<blockquote>\n<p>对客户端进制限制的相关配置</p>\n</blockquote>\n<ul>\n<li>limit_rate rate</li>\n</ul>\n<p>​    限制响应给客户端的传输速率，单位是bytes/second,0表示无限制</p>\n<ul>\n<li>limit_except method … {…}</li>\n</ul>\n<p>​    限制对指定的请求方法之外的其他方法的使用客户端;</p>\n<p>limit_except GET {</p>\n<p>​    allow 172.18.0.0/16;</p>\n<p>​    deny all;</p>\n<p>}</p>\n<blockquote>\n<p>文件操作优化</p>\n</blockquote>\n<ul>\n<li>aio on | off | threads[=pool]</li>\n</ul>\n<p>​    是否启用aio功能</p>\n<ul>\n<li>directio size | off</li>\n</ul>\n<p>​    在Linux主机启用O_DIRECT标记，此处意味文件大于等于给定的大小时使用，例如directio 4m;</p>\n<ul>\n<li>open_file_cache off</li>\n</ul>\n<p>open_flie_cache max=N [inactive=time]</p>\n<p>nginx可以缓存以下三种信息</p>\n<pre><code>    1. 文件的描述符、文件大小和最近一次的修改时间;\n    2. 打开的目录结构;\n    3. 没有找到的或者没有权限访问的文件的相关信息\n</code></pre><p>max=N:可缓存的缓存项上限;达到上限后会使用LRU算法实现缓存管理;</p>\n<p>inative=time:缓存项的非活动时长，在此处指定的时长内未被命中的或命中的次数少于open_file_cache_min_user指令所指定的次数的缓存项即为非活动项;</p>\n<ul>\n<li>open_file_cache_valid time</li>\n</ul>\n<p>​    缓存项有效性的检查频率;默认为60s</p>\n<ul>\n<li>open_file_cache_min_uses number</li>\n</ul>\n<p>​    在open_file_cache指令的inactive参数指定的时长内，至少应该被命中多少此方可被归类为活动项;</p>\n<ul>\n<li>open_file_cache_errors on | off</li>\n</ul>\n<p>​    是否缓存查找时发生错误的文件一类的信息</p>\n<blockquote>\n<p><strong>ngx_http_access_module</strong></p>\n<p>​    实现基于ip的访问控制</p>\n</blockquote>\n<ul>\n<li><p>allow address |CIDR |unix: | all;</p>\n</li>\n<li><p>deny address |CIDR |unix: | all;</p>\n</li>\n</ul>\n<p>http,server,location,limit_except</p>\n<blockquote>\n<p><strong>ngx_http_auth_basic_module模块</strong></p>\n</blockquote>\n<p>​    实现基于用户的访问控制，使用basic机制进行用户认证</p>\n<ul>\n<li><p>auth_basic string | off</p>\n</li>\n<li><p>auth_basic_user_file file;</p>\n</li>\n</ul>\n\n    <pre><code class=\"lang-shell\"><span class=\"hljs-keyword\">location</span> <span class=\"hljs-title\">/ {\n    auth_basic</span>           <span class=\"hljs-string\">\"closed site\"</span>;\n    auth_basic_user_file conf/htpasswd;\n}\n</code></pre>\n<blockquote>\n<p><strong>ngx_http_stub_status_module</strong></p>\n</blockquote>\n<p>​    用于输出nginx的基本状态信息</p>\n<blockquote>\n<p>Active  connections:活动状态的连接数</p>\n<p>accepts:已经接受的客户端请求的总数</p>\n<p>handled:已经处理完成的客户端请求的总数</p>\n<p>requests:客户端发来的总的请求数</p>\n<p>Reading:处于读取客户端请求报文首部的连接数</p>\n<p>Writing:处于向客户端发送响应报文的连接数</p>\n<p>waiting:处于等待客户端发出请求的空闲连接数</p>\n</blockquote>\n<ul>\n<li>stub_status</li>\n</ul>\n<p>配置示例</p>\n<pre><code>location    /basic_status {\n      stub_status;\n}\n</code></pre><blockquote>\n<p><strong>ngx_http_log_module</strong></p>\n</blockquote>\n<ul>\n<li>log_format name string …;</li>\n</ul>\n<p>string可以使用nginx核心模块及其它模块内嵌的变量</p>\n<ul>\n<li>acccess_log path [format]   [buffer=size]  [gzip=level]  [flush=time]  [if=condition]</li>\n</ul>\n<p>access_log off;</p>\n<p>访问日志路径，格式及相关的缓冲的配置</p>\n<p>​    buffer=size</p>\n<p>​    flush=time</p>\n<ul>\n<li>open_log_file_cache max=N [inative=time]  [min_uses=N]  [valid=time]</li>\n</ul>\n<p>open_log_file_cache off;</p>\n<p>​    缓存日志文件相关的元数据信息;</p>\n<p>​    max:缓存最大文件描述符数量</p>\n<p>​    min_uses:在inactive指定的时长内访问大于等于此值方可被当作活动项</p>\n<p>​    inactive:非活动时长</p>\n<p>​    valid:验证缓存中各缓存项是否为活动项的时间间隔</p>\n<blockquote>\n<p><strong>ngx_http_gzip_module</strong></p>\n</blockquote>\n<ul>\n<li><p>gzip on | off</p>\n</li>\n<li><p>gzip_comp_level level</p>\n</li>\n</ul>\n<p>​    Sets a gzip compression level of a response. Acceptable values are in the range from 1 to 9.</p>\n<ul>\n<li>gzip_disable regex …;</li>\n</ul>\n<p>​    Disables gzipping of responses for requests with “User-Agent” header fields matching any of the specified regular expressions.</p>\n<ul>\n<li>gzip_min_length length</li>\n</ul>\n<p>​    启用压缩功能的响应报文大小阀值</p>\n<ul>\n<li>gzip_buffers number size</li>\n</ul>\n<p>​    支持实现压缩功能时为其配置的缓冲区数量及每个缓存区的大小</p>\n<ul>\n<li>gzip_proxued off | expired | no-chche | no-store | private | no_last_modified | no_etag | auth | any  …</li>\n</ul>\n<p>​    nginx作为代理服务器收到从被代理服务器发送的响应报文后，在何种条件下启用压缩功能的;</p>\n<p>​    off：不启用</p>\n<p>​    no-cache,no-store,private:表示从被代理服务器收到响应报文首部的cache-control的值为此三者中的任何一个，则启用</p>\n<ul>\n<li>gzip_types mine-type ..;</li>\n</ul>\n<p>​    压缩过滤器，仅对此处设定的MIME类型的内容启用压缩功能;</p>\n<p>示例:</p>\n<pre><code>gzip on;\ngzip_comp_level 6;\ngzip_min_length 64;\ngzip_proxied any;\ngzip_types text/xml text/css application/javasript;\n</code></pre><blockquote>\n<p><strong>nginx_http_ssl_module</strong></p>\n</blockquote>\n<ul>\n<li><p>ssl on | off</p>\n</li>\n<li><p>ssl_certificate file</p>\n</li>\n</ul>\n<p>​    当前虚拟主机使用PEM格式的证书文件</p>\n<ul>\n<li>ssl_certificate_key file</li>\n</ul>\n<p>​    当前虚拟主机与其证书匹配的私钥文件</p>\n<ul>\n<li>ssl_protocols [SSLV2]  [SSLV3]  [TLSV1.1]  [TLSV1]  [TLSV1.2]</li>\n</ul>\n<p>​    支持ssl协议版本，默认为后3个</p>\n<ul>\n<li>ssl_session_cache off | none | [builtin[:size]]  [shared:name:size]</li>\n</ul>\n<p>​    builtin[:size]：使用Openssl内建的缓存，此缓存为每个worker进程私有</p>\n<p>​    [shared:name:size]：在各worker之间使用一个共享的缓存</p>\n<ul>\n<li>ssl_session_timeout time</li>\n</ul>\n<p>​    客户端一侧的连接可以复用ssl session cache中缓存的ssl参数有效时长</p>\n<p>示例:</p>\n<pre><code>server {\n      listen 443 ssl;\n      server_name www.domain.com;\n      root /vhosts/ssl/htdocs;\n      ssl on;\n      ssl_certificate /etc/nginx/ssl/nginx.crt;\n      ssl_certificate_key /etc/nginx/ssl/nginx.key;\n      ssl_session_cache shared:sslcache:20m;\n}\n</code></pre><blockquote>\n<p><strong>nginx_http_rewrite_module</strong></p>\n</blockquote>\n<p>​    将用户请求的URI基于regex所描述的模式进行检查，而后完成替换;</p>\n<ul>\n<li>rewirte regex replacement [flag]</li>\n</ul>\n<p>​    将用户请求的URI基于regex所描述的模式进行检查，匹配到时将其替换为relacement指定的新的URI</p>\n<p>​    <strong>注意:</strong>如果在同一配置块中存在多个rewrite规则，那么会自上而下逐个检查;被某条件规则替换完成后，会重新一轮的替换检查，因此，隐含有循环机制;[flag]所表示的标志位用于控制此循环机制;</p>\n<p>​    如果relacement是以<a href=\"http://或https://开头，则替换结果会直接以重向返回客户端\" target=\"_blank\" rel=\"noopener\">http://或https://开头，则替换结果会直接以重向返回客户端</a></p>\n<p>​        301:永久重定向</p>\n<p>​    [flag]:</p>\n<p>​        last:重写完成后停止对当前location中后续的其他重写操作，而后对新的URI启动新一轮重写检查;提前重启新一轮循环;</p>\n<p>​        break:重写完成后停止对当前URI在当前location中后续的其他重写操作，而后直接跳转至重写规则配置块之后的其他配置;结束循环;</p>\n<p>​        redirect:重写完成后以临时重定向方式直接返回重写后生成的新URI给客户端，有客户端重新发起请求;不能以<a href=\"http://或https://开头\" target=\"_blank\" rel=\"noopener\">http://或https://开头</a></p>\n<p>​        permanent:重写完成后以永久重定向方式直接返回重写后生成的新URI给客户端，由客户端重新发起请求</p>\n<ul>\n<li>return</li>\n</ul>\n<p>​    return code [text];</p>\n<p>​    return code URL;</p>\n<p>​    return URL;</p>\n<ul>\n<li><p>rewrite_log on | off;</p>\n</li>\n<li><p>if (condition)  {…}</p>\n</li>\n</ul>\n<p>​    引用一个新的配置上下文，条件满足时，执行配置块中的配置指令;server,location;</p>\n<p>​    condition:</p>\n<p>​        比较操作符:</p>\n<p>​            ==</p>\n<p>​            !=</p>\n<p>​            ~:模式匹配，区分字符大小写;</p>\n<p>​            ~*:模式匹配，不区分字符大小写</p>\n<p>​            !~:模式不匹配，区分字符大小写</p>\n<p>​            !~*:模式匹配，不区分字符大小写</p>\n<p>​        文件及目录存在性判断:</p>\n<p>​            -e,! -e</p>\n<p>​            -f,! -f</p>\n<p>​            -d,! -d</p>\n<p>​            -x,! -x</p>\n<ul>\n<li>set $varible value</li>\n</ul>\n<p>​    用户自定义变量</p>\n<blockquote>\n<p><strong>ngx_http_proxy_module</strong></p>\n</blockquote>\n<ul>\n<li>proxy_pass URL</li>\n</ul>\n<p>Context: location,if in location,limit_except</p>\n<p><strong>注意:</strong>proxy_pass后面的路径不带uri时，其会将Location的uri传递给后端主机</p>\n<pre><code>server {\n      server_name HOSTNAME;\n      location /uri/ {\n          proxy_pass http:host[:port];\n      }\n}\nhttp://HOSTNAME/uri/ --&gt; http://host/new_uri/\n</code></pre><p>如果Location定义其uri时使用了正则表达式的模式，则proxy_pass之后必须不拿使用uri;用户请求传递时传递的uri将直接附加到服务的之后;</p>\n<pre><code>server {\n      server_name xxxxxxx;\n      location ~* /uri/ {\n          proxy_pass http:host;\n      }\n}\nhttp://HOSTNAME/uri/ --&gt; http://host/uri/；\n</code></pre><ul>\n<li>proxy_set_header field value;</li>\n</ul>\n<p>​    设定发往后端主机的请求报文的请求首部的值;Context: http,server,location</p>\n<p>​    proxy_set_header X-Real-IP $remote_addr;</p>\n<p>​    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</p>\n<ul>\n<li>proxy_cache_path</li>\n</ul>\n<p>​    定义可用于proxy功能的缓存;Context: http</p>\n<p>​    proxy_cache_path path [levels=levels][use_temp_path=on|off] keys_zone=name:size [inactive=time][max_size=size][manager_files=number][manager_sleep=time][manager_threshold=time][loader_files=number][loader_sleep=time][loader_threshold=time][purger=on|off][purger_files=number][purger_sleep=time][purger_threshold=time];</p>\n<ul>\n<li>proxy_cache zone | off</li>\n</ul>\n<p>​    指明要调用的缓存，或关闭缓存的机制;Context: http,server,location</p>\n<ul>\n<li>proxy_cache_key string;</li>\n</ul>\n<p>​    缓存中用于”键”的内容    </p>\n<p>​    默认值: proxy_cache_Key $scheme\\$proxy_host\\$request_uri</p>\n<ul>\n<li>proxy_cache_valid [code …]  time</li>\n</ul>\n<p>​    定义对特定响应码的响应内容的缓存时长</p>\n<p>​    定义在http{…}中;</p>\n<p>​    proxy_cache_path /var/chche/nginx/proxy_cache levels=1:1:1  keys_zone=pxycache:20m max_size=1g</p>\n<p>​    定义在需要调用缓存功能的配置段，例如server {…};</p>\n<p>​    proxy_cache pxychche;</p>\n<p>​    proxy_cache_key $request_uri;</p>\n<p>​    proxy_cache_valid 200 302 301 1h;    </p>\n<p>​    proxy_cache_valid any 1m;</p>\n<ul>\n<li>proxy_cache_use_stale </li>\n</ul>\n<p>​    proxy_cache_use_stale error | timeout | invalid_header | updating | http_500 | http_502 | http_503 | http_504 |http_403 | http_404 | off …;</p>\n<p>确定在与代理服务器的通信过程中发生错误时，哪种情况下可能会使用过时缓存的响应</p>\n<ul>\n<li><p>proxy_cache_methods GET| HEAD | POST …</p>\n</li>\n<li><p>proxy_hide_header field;</p>\n</li>\n<li><p>proxy_connect_timeout time</p>\n</li>\n</ul>\n<p>​    默认为60s;</p>\n<blockquote>\n<p><strong>ngx_http_headers_module</strong></p>\n</blockquote>\n<p>​    向由代理服务器响应给客户端的响应报文添加自定义首部，或修改指定首部的值</p>\n<ul>\n<li>addr_header name value [always]</li>\n</ul>\n<p>​    添加自定义首部</p>\n<p>​    addr_header X-Via  $server_addr;</p>\n<p>​    add_header  X-Accel $server_name;</p>\n<ul>\n<li>expires [modified]  time</li>\n</ul>\n<p>​    exprires epoch | max | off;</p>\n<p>​    用于定义Expire或Cache-Control首部的值;</p>\n<blockquote>\n<p><strong>nginx_http_fastcgi_module</strong></p>\n</blockquote>\n<ul>\n<li><p>fastcgi_pass address</p>\n</li>\n<li><p>fastcgi_index name</p>\n</li>\n<li><p>fastcgi_param parameter value [if_not_empty]</p>\n</li>\n</ul>\n<p>​    设置一个参数传递给FastCGI服务器。值可以包含文本、变量和它们的组合。</p>\n<p>示例:</p>\n<pre><code>location ~* \\.php$ {\n      root /data/www;\n      fastcgi_pass 127.0.0.1:9000;\n      fastcgi_index index.php;\n      include fastcgi_params;\n}\n</code></pre><blockquote>\n<p>通过/pm_status和/ping来获取fpm server状态信息</p>\n</blockquote>\n<pre><code>location ~* ^(pm_status|ping)$ {\n  include    fastcgi_parms;\n  fastcgi_pass 127.0.0.1:9000;\n  fastcgi_param SCRIPT_FILENAME $fastcgi_script_name;\n}\n需要提前开启php-fpm.conf的pm_status和ping功能\n</code></pre><ul>\n<li>fastcgi_cache_path path [levels=levels]  [use_temp_path=on|off]  keys_zone=name:size  [inactive=time]  [max_size=size]  [manager_files=number]  [manager_sleep=time]  [manager_threshold=time]  [loader_files=number]  [loader_sleep=time]  [loader_threshold=time]  [purger_files=number]  [purger_sleep=time]  [purger_threshold=time]</li>\n</ul>\n<p>​    定义fastcgi的缓存;缓存位置为磁盘上的文件系统，由path所指定路径来定义;    </p>\n<p>​        levels=lebels: 缓存目录的层级数量，以及每一级的目录数量;levels=ONE;TWO;THREE</p>\n<p>​            leves=2:1:1</p>\n<p>​        keys_zone=name:size</p>\n<p>​            k/v映射的内存空间的名称及大小</p>\n<p>​        inactive=time</p>\n<p>​            非活动时长</p>\n<p>​        max_size=size</p>\n<p>​            磁盘上用于缓存数据的缓存空间上限</p>\n<ul>\n<li>fascgi_cache zone | off;</li>\n</ul>\n<p>​    调用指定的缓存空间来缓存数据;http,server,location</p>\n<ul>\n<li>fastcgi_cache_key string;</li>\n</ul>\n<p>​    定义用作缓存项的key的字符串;</p>\n<ul>\n<li>fastcgi_chche_methods GET| HEAD| POST..;</li>\n</ul>\n<p>​    为那些请求方法使用缓存</p>\n<ul>\n<li>fastcgi_cache_min_user number;</li>\n</ul>\n<p>​    缓存空间中的缓存项在inactive定义的非活动时间内至少要被访问到此处所指定的次数方可被认作活动项</p>\n<ul>\n<li>fastcgi_cache_valid [code..] time</li>\n</ul>\n<p>​    不同的响应码各自缓存时长</p>\n<p>示例</p>\n<pre><code>http {\n  ...\n  fastcgi_cache_path /var/cache/nginx/fastcgi_cache levels=2:1:1 keys_zone=fcgi:20m inactive=120s;\n  ...\n  server {\n    ...\n    location ~* \\.php$ {\n          ...\n          fastcgi_cache fcgi;\n          fastcgi_cache_key $request_uri;\n          fastcgi_cache_valid 200 302 10m;\n          fastcgi_cache_valid 301 1h;\n          fastcgi_cache_valid any 1m;\n    }\n  }\n}\n</code></pre><ul>\n<li>fastcgi_keep_conn on | off;</li>\n</ul>\n<blockquote>\n<p>默认情况下，一个 FastCGI 服务器将关闭连接右后发送响应。<em>*然而，当此指令设置的值时，nginx 将指示 FastCGI 服务器将使连接保持打开。</em></p>\n</blockquote>\n</li>\n</ul>\n","categories":[],"tags":[{"name":"web","path":"api/tags/web.json"},{"name":"nginx","path":"api/tags/nginx.json"}]}