{"title":"Http two","slug":"http-ca","date":"2017-04-20T08:08:51.000Z","updated":"2017-11-19T13:15:37.000Z","comments":true,"excerpt":"","content":"<h2 id=\"HTTP2\"><a href=\"#HTTP2\" class=\"headerlink\" title=\"HTTP2\"></a>HTTP2</h2><h4 id=\"Curl\"><a href=\"#Curl\" class=\"headerlink\" title=\"Curl\"></a><strong>Curl</strong></h4><blockquote>\n<p>基于URL语法在命令行方式下工作多文件传输工具</p>\n</blockquote>\n<p><strong>一些选项</strong></p>\n<ul>\n<li>-A/–user-agent <string>    设置用户代理</string></li>\n<li>–basic   使用http基本验证</li>\n<li>–tcp-nodelay  使用TCP_NODELAY</li>\n<li>-e/–referer <url> 来源网址</url></li>\n<li>–cacert <file> ssl</file></li>\n<li>–compressed  要求返回的是压缩多形势</li>\n<li>-H/–header <line></line> 自定义头信息</li>\n<li>-I/–head  只显示响应报文首部信息</li>\n<li>–limit-rate <rate>  设置传输速度</rate></li>\n<li>-u/–user <user[:password]> 设置服务器多用户和密码</user[:password]></li>\n<li>-m  设置最大传输时间</li>\n<li>-k 　不使用证书</li>\n</ul>\n<p>eg: curl -I -m 5 -o /dev/null -s -w %{http_code} www.baidu.com</p>\n<p><strong>mod_deflate模块</strong></p>\n<ul>\n<li><p>LoadModule deflate_module modules/mod_deflate.so</p>\n</li>\n<li><p>节省带宽，传输前对资源进行压缩</p>\n</li>\n<li><p>配置</p>\n<blockquote>\n<p>vim +$ /etc/httpd/conf/httpd.conf</p>\n<p>SetOutputFilter DEFLATE<br>AddOutPutFilterByType DEFLATE text/html text/plain text/css text/xml text/javascript application/xhtml+xml</p>\n</blockquote>\n</li>\n<li><p>可以用浏览器f12测试</p>\n</li>\n</ul>\n<p><strong>Https</strong></p>\n<ul>\n<li><p>CA端</p>\n\n    <pre><code class=\"lang-SHELL\">cd /etc/pki/CA\n(umask <span class=\"hljs-number\">077</span>;openssl genrsa -<span class=\"hljs-keyword\">out</span>  <span class=\"hljs-keyword\">private</span>/cakey.pem <span class=\"hljs-number\">2048</span>)\nopenssl req -new -x509 -key <span class=\"hljs-keyword\">private</span>/cakey.pem -<span class=\"hljs-keyword\">out</span> cacert.pem\n<span class=\"hljs-keyword\">touch</span> serial <span class=\"hljs-built_in\">index</span>.txt\necho <span class=\"hljs-number\">01</span> &gt; serial\n</code></pre>\n</li>\n<li><p>Http端</p>\n\n    <pre><code class=\"lang-shell\">cd /etc/httpd\nmkdir ssl\ncd ssl\n(umask <span class=\"hljs-number\">077</span>;openssl genrsa -out httpd.<span class=\"hljs-type\">key</span> <span class=\"hljs-number\">1024</span>)\nopenssl req -new -<span class=\"hljs-type\">key</span> httpd.<span class=\"hljs-type\">key</span> -out httpd.csr\n</code></pre>\n<blockquote>\n<p>将生成多csr发送至CA</p>\n</blockquote>\n</li>\n<li><p>颁发</p>\n\n    <pre><code class=\"lang-shell\"><span class=\"hljs-keyword\">open</span> <span class=\"hljs-keyword\">ca</span> -<span class=\"hljs-keyword\">in</span> httpd.csr -<span class=\"hljs-keyword\">out</span> /etc/pki/<span class=\"hljs-keyword\">CA</span>/certs/httpd.crt\n</code></pre>\n<blockquote>\n<p>将生成多证书发送给http服务器</p>\n</blockquote>\n</li>\n<li><p>安装ssl模块</p>\n\n    <pre><code class=\"lang-shell\">yum install mod_ssl\nhttpd -M | <span class=\"hljs-keyword\">grep</span> ssl\nvim <span class=\"hljs-regexp\">/etc/</span>httpd<span class=\"hljs-regexp\">/conf.d/</span>ssl.conf\nSSLCertificateFile <span class=\"hljs-regexp\">/etc/</span>httpd<span class=\"hljs-regexp\">/ssl/</span>httpd.crt\nSSLCertificateKeyFile <span class=\"hljs-regexp\">/etc/</span>httpd<span class=\"hljs-regexp\">/ssl/</span>httpd.key\n</code></pre>\n</li>\n</ul>\n<p><strong>Http自带工具</strong></p>\n<ul>\n<li><p>Httpasswd</p>\n<blockquote>\n<p>basic认证基于文件实现时，用到多帐号文件生成工具</p>\n</blockquote>\n</li>\n<li><p>Apachectl</p>\n<blockquote>\n<p>httpd自带多服务控制脚本，支持start和stop</p>\n</blockquote>\n</li>\n<li><p>Apxs</p>\n<blockquote>\n<p>由httpd-devel包提供，扩展Http使用第三方模块的工具</p>\n</blockquote>\n</li>\n<li><p>Rotatelogs</p>\n<blockquote>\n<p>日志滚动工具</p>\n</blockquote>\n</li>\n<li><p>Suexec</p>\n<blockquote>\n<p>访问某些有特殊权限配置的资源，临时切换至用户身份运行</p>\n</blockquote>\n</li>\n<li><p>Ab</p>\n</li>\n</ul>\n<p><strong>Http2.4新模块</strong></p>\n<ul>\n<li>mod_proxy_fcgi    支持PHP等动态语言</li>\n<li>mod_proxy_scgi SCGI protocol  支持python</li>\n<li>mod_remoteip  获取远端真实访问ip</li>\n</ul>\n<p><strong>Http Reponse报文的语法格式</strong></p>\n<ul>\n<li><p>version Http协议版本，HTTP/\\<major>.\\<minor></minor></major></p>\n</li>\n<li><p>status  响应状态码，标记请求过程中所发生的情况</p>\n</li>\n<li><p>reason-phrase  原因短语，状态码所标记状态多详细版本</p>\n</li>\n<li><p>hearders  用来标记请求和响应属性</p>\n</li>\n<li><p>entity-bady  响应主体部分，响应时候附加数据</p>\n</li>\n<li><p>格式</p>\n<blockquote>\n<p>version status reason-phrase</p>\n<p>headers</p>\n<p>entity-body</p>\n</blockquote>\n</li>\n</ul>\n<p><strong>常见多Method的方法</strong></p>\n<ul>\n<li>GET:从服务器获取一个资源</li>\n<li>HEAD:只从服务器获取文档响应首部</li>\n<li>POST:向服务器发送要处理多数据，放在请求报文的\\<entity-body>中</entity-body></li>\n<li>PUT:与post相反，将请求的主体部分存储在服务器上</li>\n<li>DELETE:请求删除服务器上指定的文档</li>\n<li>TRACE:追踪请求到达服务器中间经过的代理服务器</li>\n<li>OPTIONS:请求服务器返回对追定资源支持使用多请求方法</li>\n</ul>\n<p><strong>状态码分类</strong></p>\n<ul>\n<li>1xx:100-101 额外信息提示</li>\n<li>2xx:200-206 表示成功类响应</li>\n<li>3xx:300-305 重定向</li>\n<li>4xx:400-415 错误类响应码，由于客户端发生错误，如客户端请求一个根本不存在的资源</li>\n<li>5xx:500-505 错误类信息，服务器端错误，服务器本身一些问题导致请求无法成功</li>\n</ul>\n<p><strong>状态码的分类</strong></p>\n<ul>\n<li>200    请求成功 OK</li>\n<li>301  永久重定向  Moved Permanently</li>\n<li>302  临时重定向  Found</li>\n<li>304  请求资源未发生改变 Not Modified</li>\n<li>401  输入帐号和密码认证之后才能访问资源</li>\n<li>403  请求被禁止 Fornodden</li>\n<li>404  服务无法找到客户端请求多资源  </li>\n<li>500  服务器内部错误 Internal Server Error</li>\n<li>502  代理服务器从后端服务器收到一条伪响应 bad gateway</li>\n</ul>\n<p>  ​</p>\n","categories":[],"tags":[{"name":"Http","path":"api/tags/Http.json"},{"name":"Https","path":"api/tags/Https.json"}]}