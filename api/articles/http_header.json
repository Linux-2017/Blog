{"title":"HTTP HEADER","slug":"http_header","date":"2017-05-25T07:30:49.000Z","updated":"2017-11-19T13:15:37.000Z","comments":true,"excerpt":"","content":"<h4 id=\"HTTP-HEADER\"><a href=\"#HTTP-HEADER\" class=\"headerlink\" title=\"HTTP HEADER\"></a>HTTP HEADER</h4><ul>\n<li>Accept-Ranges：表明服务器是否支持指定范围请求及那种类型的分段请求</li>\n<li>Age：从原始服务器到代理缓存形成的估算时间</li>\n<li>Allow：对某网络资源的有效请求行为，不允许则返回405</li>\n<li>Cache-Contril：告诉所有的缓存机制是否可以缓存及哪种类型</li>\n<li>Content-Encoding：web服务器支持返回内容压缩编码类型</li>\n<li>Content-Language：响应体的语言</li>\n<li>Content-Length：响应体的长度</li>\n<li>Content-Location：请求资源可替代的备用的另一地址</li>\n<li>Content-MD5：返回资源的MD5校验值</li>\n<li>Content-Range：在整个返回体中本部分的字节位置</li>\n<li>Centent-Type：返回内容的MIME类型</li>\n<li>Date：原始服务器消息发出的时间</li>\n<li>ETag：请求变量的实体标签的当前值</li>\n<li>Expires：响应过期的日期和时间</li>\n<li>Last-Modified：请求资源的最后修改时间</li>\n<li>Location：用来重定向接收方到非请求URL的位置来完成请求或标识新的资源</li>\n<li>Pragma：包括实现特定的指令，他可应用呢到响应链上的任何接收方</li>\n<li>Proxy-Authenticte：它指出认证方案可应用到代理的该URL上的参数</li>\n<li>refresh：应用于重定向或一个新的资源被创造，在5秒之后重定向</li>\n<li>Retry-After：如果实体暂时不可取，通知客户端在指定时间之后再次尝试</li>\n<li>Server：web服务器软件名称</li>\n<li>Set-Cookie：设置Http Cookie</li>\n<li>Trailer：指出头域在分块传输编码的尾部存在</li>\n<li>Transfer-Encoding：文件传输编码</li>\n<li>Vary：告诉下游代理是使用缓存响应 还是从原始服务器请求</li>\n<li>Via：告知代理客户端响应是通过哪里发送的</li>\n<li>Warning：警告实体可能存在的问题</li>\n<li>WWW-Authenticate：表面客户端请求实体应该使用的授权方案</li>\n</ul>\n<p><strong>HTTP Request的Header信息</strong></p>\n<ol>\n<li><p>Http请求方式</p>\n<p>GET    向服务器请求一个文件</p>\n<p>POST    向WEB服务器发送数据让WEB服务器进行处理</p>\n<p>PUT    向WEB服务器发送数据并存储在WEB服务器内部</p>\n<p>HEAD    检查一个对象是否存在</p>\n<p>DELNET    从服务器删除一个文件</p>\n<p>CONNECT    对通道提供支持</p>\n<p>TRACE    跟踪到服务器的路径</p>\n<p>OPTIONS    查询Web服务器的性能</p>\n</li>\n<li><p>Host</p>\n<p>请求的web服务器域名地址</p>\n</li>\n<li><p>User-Agent</p>\n<p>HTTP客户端运行的浏览器类型的详细信息。通过该头部信息，web服务器可以判断到当前Http请求的客户端浏览器类别</p>\n</li>\n<li><p>Accept</p>\n<p>指明客户端能够接受的内容类型，内容类型中的先后次序表示客户端接收的先后次序。</p>\n</li>\n<li><p>Accept-Language</p>\n<p>指明Http客户端浏览器用来展示返回信息所优先选择的语言</p>\n</li>\n<li><p>Accept-Encoding</p>\n<p>指定客户端浏览器可以支持的web浏览器返回内容压缩编码类型。表示允许服务器在将输出内容发送到客户端以前进行压缩，以节约带宽。这里设置的就是客户端浏览器所能够支持的返回压缩格式</p>\n<p>​    Accept-Encoding: gzip,deflate</p>\n</li>\n<li><p>Accept-Charset</p>\n<p>浏览器可以接受的字符编码集</p>\n</li>\n<li><p>Content-Type</p>\n<p>显示此HTTP请求提交的内容类型。一般只有post提交时才需要设置该属性。</p>\n</li>\n<li><p>Connection</p>\n<p>表示是否需要持久连接。如果web服务器端看到这里的值为”Keep-Alive”,或者看到请求使用的是HTTP 1.1(HTTP 1.1默认进行持久连接)，它就可以利用持久连接的优点，当页面包含多个元素时(例如Applet，图片)，显著地减少下载所需要的时间。要实现这一点，web服务器需要在返回客户端HTTP头信息中发送一个Content-Length(返回信息正文的长度)头，最简单的实现方法是：先把内容写入ByteArrayOutputStream，然后在正式写出内容之前计算它的大小。</p>\n</li>\n<li><p>Keep-Alive</p>\n<p>显示此HTTP连接的Keep-Alive时间。示客户端到服务器端的连接持续有效，当出现对服务器的后继请求时，Keep-Alive功能避免了建立或者重新建立连接。</p>\n<p>从HTTP/1.1协议之后，就有了长连接，即在规定的Keep-Alive时间内，连接是不会断开的。</p>\n</li>\n<li><p>cookie</p>\n<p>HTTP请求发送时，会把保存在该请求域名下的所有cookie值一起发往给web服务器。</p>\n</li>\n<li><p>包含一个URL,用户从该URL代表的页面出发访问当前请求的页面</p>\n</li>\n</ol>\n<p><strong>服务器返回HTTP头部信息</strong></p>\n<ol>\n<li><p>Content-Length</p>\n<p>表示web服务器返回消息正文的长度</p>\n</li>\n<li><p>Content-Type</p>\n<p>返回数据的类型</p>\n</li>\n<li><p>Date</p>\n<p>显示当前时间</p>\n</li>\n</ol>\n","categories":[{"name":"HTTP HEADER","path":"api/categories/HTTP HEADER.json"}],"tags":[{"name":"HTTP HEADER","path":"api/tags/HTTP HEADER.json"}]}