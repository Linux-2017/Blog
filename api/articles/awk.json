{"title":"awk","slug":"awk","date":"2017-04-08T14:20:19.000Z","updated":"2017-11-19T13:15:37.000Z","comments":true,"excerpt":"","content":"<h1 id=\"awk\"><a href=\"#awk\" class=\"headerlink\" title=\"awk\"></a>awk</h1><p><strong>基本用法</strong></p>\n<ul>\n<li>awk [option] ‘program’ var=value file…</li>\n<li>awk [option] -f programfile var=value file…</li>\n<li>awk [option] ‘BEGIN{action;…}pattern{action;…}END{action;…}’ file</li>\n</ul>\n<p><strong>awk变量</strong></p>\n<ul>\n<li>FS: 输入字段分隔符</li>\n<li>OFS: 输出字段分隔符，默认为空白字符</li>\n<li>RS: 输入记录分隔符,指定输入时的换行符,原换行符仍有效</li>\n<li>ORS: 输出记录分隔符，输出时用指定符合代替换行符</li>\n<li>NF: 字段数量</li>\n<li>NR: 行号</li>\n<li>FNR: 各文件分别计数，行号</li>\n<li>FILENAME: 当前文件名</li>\n<li>ARGC: 命令行参数的个数</li>\n<li>ARGV: 数组，保存的三命令行所给定的各参数</li>\n</ul>\n<p><strong>printf命令</strong></p>\n<ul>\n<li><p>格式化输出: printf ‘FORMAT’ , item1, item2,…</p>\n<ul>\n<li>必须指定format</li>\n<li>不会自动换行，需要显示给出换行控制符，\\n</li>\n<li>FORMAT中需要分别为后面的每个item指定格式符</li>\n</ul>\n</li>\n<li><p>格式符：与item一一对应</p>\n<ul>\n<li>%c: 显示字符的ascii码</li>\n<li>%d,%i: 显示十进制整数</li>\n<li>%e,%E: 显示科学计数法数值</li>\n<li>%f: 显示为浮点数</li>\n<li>%g,%G: 以科学计数发或浮点数显示数值</li>\n<li>%s: 显示字符串</li>\n<li>%u: 无符号整数</li>\n<li>%%: 显示%自身</li>\n</ul>\n</li>\n<li><p>修饰符</p>\n<ul>\n<li>#[.#]: 第一个数字控制显示的宽度；第二个#表示小数点后精度，%3.1f</li>\n<li>-: 左对齐(默认右对齐)　%-15s</li>\n<li>+: 显示数值的正负符号　%+d</li>\n</ul>\n</li>\n<li><p>操作符</p>\n<ul>\n<li><p>&amp;&amp; || 非!</p>\n</li>\n<li><p>函数调用: function_name(argu1, argu2,…)</p>\n</li>\n<li><p>条件表达式(三目表达式)</p>\n<blockquote>\n<p>selector?if-true-expressioon:if-false-expression</p>\n</blockquote>\n\n    <pre><code class=\"lang-shell\">awk -F: '{3&gt;=500?usertype=<span class=\"hljs-string\">\"comman user\"</span><span class=\"hljs-function\">:usertype</span>=<span class=\"hljs-string\">\"sysadmin or root\"</span>;printf <span class=\"hljs-string\">\"%-15s:%-s\\n\"</span>,1,usertype}' <span class=\"hljs-string\">/etc/passwd</span>\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>awk PATTERN</strong></p>\n<ul>\n<li><p>如果为指定：空模式，匹配每一行</p>\n</li>\n<li><p>/regular expression/: 仅处理能够模式匹配到的行，需要用//括起来</p>\n</li>\n<li><p>relational expression: 关系表达式，结果为真，才会被处理</p>\n<ul>\n<li>真：结果为非０，非空字符串</li>\n<li>假：结果为空字符串或０值</li>\n</ul>\n</li>\n<li><p>line ranges: 行范围</p>\n<p>startline,endline: /pat1/,/pat2/ 不支持直接给出数值格式</p>\n\n    <pre><code class=\"lang-shell\">awk -<span class=\"hljs-string\">F:</span> <span class=\"hljs-string\">'/^root\\&gt;/,/^nobody\\&gt;/{print $1}'</span> <span class=\"hljs-regexp\">/etc/</span>passwd\nawk -<span class=\"hljs-string\">F:</span> <span class=\"hljs-string\">'(NR&gt;=10&amp;&amp;NR&lt;=20){print NR,$1}'</span>\n</code></pre>\n</li>\n<li><p>BEGIN/END模式</p>\n<p>BEGIN{}:仅在开始处理文件中的文本之前执行一次</p>\n<p>END{}: 仅在文本处理完成之后执行一次</p>\n</li>\n</ul>\n<p><strong>控制语句</strong></p>\n<ul>\n<li><p>if-else</p>\n<blockquote>\n<p>语法：if(condition){statement;…}[else statement]</p>\n<p>​        if(condition1){statement1}else if(condition2){statement2}else{statement3}</p>\n<p>使用场景:对awk取得的正行或某个字段做条件判断</p>\n</blockquote>\n\n    <pre><code class=\"lang-SHELL\">awk 'BEGIN{ <span class=\"hljs-keyword\">test</span>=100;<span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">test</span>&gt;90){<span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">\"very good\"</span>}<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">test</span>&gt;60){<span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">\"good\"</span>}<span class=\"hljs-keyword\">else</span>{<span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">\"no pass\"</span>}}'  \ndf -Ph| awk -F% '/^\\/dev/{<span class=\"hljs-keyword\">print</span> <span class=\"hljs-variable\">$1}</span>'|awk '<span class=\"hljs-variable\">$NF</span>&gt;=80{<span class=\"hljs-keyword\">print</span> <span class=\"hljs-variable\">$1</span>,<span class=\"hljs-variable\">$5}</span>'\n</code></pre>\n</li>\n<li><p>while循环</p>\n<blockquote>\n<p>语法: while(condition){statement;…}</p>\n<p>使用场景: 对一行内的多个字符逐一类似处理时使用，对数组中的各元素逐一处理时使用</p>\n</blockquote>\n<pre><code>awk &#39;/^[[:space:]]*linux16/{i=1;while(i&lt;=NF){if(length($i)&gt;=10){print $i,length($i)};i++}}&#39; /etc/grub2.cfg\n</code></pre></li>\n<li><p>do-while循环</p>\n<blockquote>\n<p>语法：do {statement;…}while(condition)</p>\n<p>意义:无论真假，至少循环一次</p>\n</blockquote>\n<pre><code>awk &#39;BEGIN{totle=0;i=0;do{total+=i;i++}while(i&lt;=100);print total}&#39;\n</code></pre></li>\n<li><p>for循环}}</p>\n<blockquote>\n<p>语法: for(expr1;expr2;expr3) {statement;…}</p>\n<p>常见用法:</p>\n<p>​    for( variable assignment;condition;iteration process)</p>\n<p>特殊用法: 遍历数组中的元素</p>\n<p>​    语法: for(var in array) {for-body}</p>\n</blockquote>\n\n    <pre><code class=\"lang-shell\">awk '/^[[:space:]]*linux16/{<span class=\"hljs-keyword\">for</span>(i=1;i&lt;=NF;i++){<span class=\"hljs-keyword\">print</span> <span class=\"hljs-variable\">$i</span>,<span class=\"hljs-built_in\">length</span>(<span class=\"hljs-variable\">$i</span>)}}' /etc/grub2.cfg\n</code></pre>\n</li>\n<li><p>switch语句</p>\n<blockquote>\n<p>语法: switch(expression){case VALUE1 or /REGEXP/:statement1;case VALUE2 or /REGEXP2/:statement…;default:statementn}</p>\n</blockquote>\n</li>\n<li><p>break和continue</p>\n<blockquote>\n<p>awk ‘BEGIN{sum=0;for(i=0;i&lt;=100;i++){if(i%2==0)continue;sum+=i}print sum}’</p>\n<p>awk ‘BEGIN{sum=0;for(i=1;i&lt;=100;i++){if(i==66)break;sum+=i}print sum}’</p>\n</blockquote>\n</li>\n<li><p>next</p>\n<blockquote>\n<p>提前结束对本行处理而直接进入下一行处理(awk自身循环)</p>\n</blockquote>\n\n    <pre><code class=\"lang-shell\"><span class=\"hljs-attribute\">awk</span> -F: <span class=\"hljs-string\">'{if(<span class=\"hljs-variable\">$3</span>%2!=0) next; print <span class=\"hljs-variable\">$1</span>,<span class=\"hljs-variable\">$3</span>}'</span> /etc/passwd\n</code></pre>\n</li>\n</ul>\n<p><strong>AWK数组</strong></p>\n<ul>\n<li><p>index-expression</p>\n<ul>\n<li><p>可以使用任意字符串；字符串要使用双引号括起来</p>\n</li>\n<li><p>如果某数组元素事先不存在，在引用时，awk会自动创建此元素，并将其值初始化为空串</p>\n</li>\n<li><p>若要判断数组中是否存在某元素，要使用”index in array”格式进行遍历</p>\n<blockquote>\n<p>示例: weedays[“mon”]=”Monday”</p>\n<p>awk ‘BEGIN{weekdays[“mon”]=”Monday”;weekdays[“tue”]=”Tuesday”;print weekdays[“mon”]}’</p>\n<p>用for循环遍历array的每个索引</p>\n<p>awk ‘BEGIN{weekdays[“mon”]=”Monday”;weekdays[“tue”]=”Tuesday”;for(i in weekdays){print weekdays[i]}}’</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>AWK函数</strong></p>\n<ul>\n<li><p>数值处理</p>\n<ul>\n<li><p>rand(): 返回0和1之间一个随机数</p>\n<blockquote>\n<p>awk ‘BEGIN{srand();for(i=1;i&lt;=10;i++)print int(rand()*100)}’</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>字符串处理</p>\n<ul>\n<li><p>length([s]): 返回指定字符串的长度</p>\n</li>\n<li><p>sub(r,s[t]): 对t字符串进行搜索r表示模式匹配的内容，并将第一个匹配的内容替换为s</p>\n<blockquote>\n<p>[root@vmbox6 ~]# echo “2008:08:08 08:08:08” | awk ‘sub(/:/,”-“,$1)’<br>2008-08:08 08:08:08</p>\n</blockquote>\n</li>\n<li><p>gsub(r,s[t]): 对t字符串进行搜索r表示模式匹配的内容，并全部替换为s所表示的内容</p>\n<blockquote>\n<p>[root@vmbox6 ~]# echo “2008:08:08 08:08:08” | awk ‘gsub(/:/,”-“,$1)’<br>2008-08-08 08:08:08</p>\n</blockquote>\n</li>\n<li><p>split(s,array,[r]): 以r为分隔符，切割字符串，并将切割后的结果保存之array所表示的数组中，第一个索引为1,第二个索引为2,…</p>\n<blockquote>\n<p>[root@vmbox6 ~]# netstat -tan | awk ‘/^tcp>/{split($5,ip,”:”);count[ip[1]]++}END{for (i in count) {print i,count[i]}}’<br> 5<br>192.168.56.1 2<br>104.116.243.8 1<br>0.0.0.0 5</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>自定义函数</p>\n<ul>\n<li><p>格式: </p>\n<blockquote>\n<p>function name ( parameter,parameter, …){</p>\n<p>​            statements</p>\n<p>​            return expression</p>\n<p>}</p>\n</blockquote>\n</li>\n<li><p>示例:</p>\n<blockquote>\n<p>cat fun.awk</p>\n<p>function max(v1,v2){</p>\n<p>​    v1&gt;v2?var=v1:var=v2</p>\n<p>​    return var</p>\n<p>}</p>\n<p>BEGIN{a=3;b=2;print max(a,b)}</p>\n<p>awk -f fun.awk</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>AWK中调用shell命令</strong></p>\n<ul>\n<li><p>system命令</p>\n<blockquote>\n<p>空格是awk中的字符串连接符，如果system中需要使用awk中的变量可以使用空格分割，或者说除了awk的变量外其他一律用””引用起来</p>\n<p>awk BEGIN’{system(“hostname”)}’</p>\n<p>awk BEGIN’{score=100;system(“echo your score is “ score)}’</p>\n</blockquote>\n</li>\n</ul>\n<p><strong>AWK脚本</strong></p>\n<ul>\n<li><blockquote>\n<p>cat a.awk</p>\n<p>#!/bin/awk -f</p>\n<p>{if($3&gt;=1000)print \\$1,\\$3}</p>\n</blockquote>\n<p>chmod +x a.awk</p>\n<p>a.awk -F:  /etc/passwd</p>\n</li>\n</ul>\n<p><strong>向AWK脚本传递参数</strong></p>\n<ul>\n<li><p>格式:</p>\n<blockquote>\n<p>awkfile var=value var2=value2 …   Inputfile</p>\n</blockquote>\n<p><strong>注意</strong> ： 在BEGIN过程中不可用。知道首行输入完成以后，变量才可用。可以通过-v参数，让awk在执行BEGIN之前得到变量的值。命令行中每一个指定的变量都需要一个-v参数</p>\n<pre><code>[root@vmbox6 ~]# cat test.awk \n#!/bin/awk -f\n{if($3 &gt;= min &amp;&amp; $3 &lt;= max)print $1,$3}\n\n[root@vmbox6 ~]# ./test.awk -F: -v  min=100 -v  max=200 /etc/passwd\nusbmuxd 113\navahi-autoipd 170\nabrt 173\n</code></pre></li>\n</ul>\n","categories":[{"name":"Linux","path":"api/categories/Linux.json"}],"tags":[{"name":"Linux","path":"api/tags/Linux.json"}]}