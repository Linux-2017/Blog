{"title":"systemd","slug":"systemd","date":"2017-04-08T14:22:22.000Z","updated":"2017-11-19T13:15:37.000Z","comments":true,"excerpt":"","content":"<h1 id=\"Systemd\"><a href=\"#Systemd\" class=\"headerlink\" title=\"Systemd\"></a>Systemd</h1><ul>\n<li>POST–&gt;Boot Sequence–&gt;Bootloader–&gt;Kernel initramfs(initrd)–&gt;rootfs–&gt;/sbin/init<ul>\n<li>init <ul>\n<li>Centos 5 : Sysv init </li>\n<li>Centos 6 : Upstart</li>\n<li>Centos 7 : Systemd</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Systemd: 系统启动和服务器守护进程管理器，负责在系统启动或运行时，激活系统资源，服务器进程和其他进程．系统引导时实现服务并行启动，按需启动守护进程，自动化的服务依赖关系管理，同时采用socket式与Ｄ-Bus总线式激活服务，系统状态快照．</li>\n</ul>\n<h2 id=\"unit\"><a href=\"#unit\" class=\"headerlink\" title=\"unit\"></a>unit</h2><p><strong>unit</strong>表示不同类型的systemd对象，通过配置文件进行标识和配置；文件中主要包含了系统服务，监听socket,保存系统快照以及其他与init相关的信息</p>\n<p><strong>配置文件</strong>：</p>\n<ul>\n<li>/usr/lib/systemd/system: 每个服务最主要的启动脚本设置，类似于之前的/etc/init.d/</li>\n<li>/run/systemd/system: 系统执行过程中所产生的服务脚本，比上面目录优先运行</li>\n<li>/etc/systemd/system: 管理员建立的执行脚本，类似与/etc/rc.d/rcN.d/sxx类的功能，比上面目录优先运行</li>\n</ul>\n<p><strong>unit类型</strong></p>\n<ul>\n<li>Systemctl -t help 查看unit类型</li>\n<li>Service unit: 文件扩展名为.service，用于定义系统服务</li>\n<li>Target uniq: .device,用于定义内核识别的设备</li>\n<li>Ｍount unit: .mount,用于定义文件系统挂载点</li>\n<li>Socket unit: .socket,用于标识进程间通信用的socket文件，也可在系统启动时，延迟启动服务，实现按需启动</li>\n<li>Snapshot unit: .snapshot,管理系统快照</li>\n<li>Swap unit: .swao,用于标识swap设备</li>\n<li>Automount unit: .automount,文件系统的自动挂载点</li>\n<li>Path unit: .path,用于定义文件系统中的一个文件或目录使用，常用于当文件系统变化时，延迟激活服务，如：spool目录</li>\n</ul>\n<p><strong>管理服务</strong></p>\n<ul>\n<li>systemctl start|stop|reload|restart|status name.service</li>\n<li>条件式重启: 已启动才重启，否则不做操作: systemctl try-restart name.service</li>\n<li>禁止自动和手动启动: Systemctl mask name.service</li>\n<li>取消禁止: Systemctl unmask name.service</li>\n</ul>\n<p><strong>服务查看</strong></p>\n<ul>\n<li><p>查看某服务当前激活与否的状态</p>\n<blockquote>\n<p>systemctl is-active name.service</p>\n</blockquote>\n</li>\n<li><p>查看所有已经激活的服务</p>\n<blockquote>\n<p>systemctl list-unis –type|-t service</p>\n</blockquote>\n</li>\n<li><p>查看所有服务</p>\n<blockquote>\n<p>systemctl list-units –type service -all|-a</p>\n</blockquote>\n</li>\n<li><p>设定某服务的开机启动</p>\n<blockquote>\n<p>chkconfig name on ==&gt; systemctl enable name.service</p>\n</blockquote>\n</li>\n<li><p>设定某服务的开机禁止启动</p>\n<blockquote>\n<p>chkconfig name off ==&gt; systemctl disable name.service</p>\n</blockquote>\n</li>\n<li><p>查看所有的开机自启状态</p>\n<blockquote>\n<p>chkconfig –list ==&gt; systemctl list-unit-files –type service</p>\n</blockquote>\n</li>\n<li><p>用来列出该服务在哪些运行级别下启用和禁用</p>\n<blockquote>\n<p>chkconfig sshd -list ==&gt; ls /etc/systemd/system/*.wants/sshd.service</p>\n</blockquote>\n</li>\n<li><p>查看服务是否开机自启</p>\n<blockquote>\n<p>systemctl is-enabled name.service</p>\n</blockquote>\n</li>\n<li><p>其他命令</p>\n<blockquote>\n<p>查看服务的依赖关系:</p>\n<p>systemctl list-dependencies name.service</p>\n</blockquote>\n</li>\n<li><p>杀掉进程</p>\n<blockquote>\n<p>systemctl kill 进程名</p>\n</blockquote>\n</li>\n</ul>\n<p><strong>服务状态</strong></p>\n<ul>\n<li>systemctl list-unit-files –type service –all显示状态</li>\n<li>loaded: Unit配置文件已处理</li>\n<li>active(running) : 一次或多次持续处理的运行</li>\n<li>active(exited): 成功完成一次性的配置</li>\n<li>active(waiting): 运行中，等待一个事件</li>\n<li>inactive: 不运行</li>\n<li>enabled: 开机启动</li>\n<li>disabled: 开机不启动</li>\n<li>static: 开机不启动，但可被另一个启用的服务激活</li>\n</ul>\n<p><strong>命令示例</strong></p>\n<ul>\n<li><p>显示所有单元状态</p>\n<blockquote>\n<p>systemctl 或 systemctl list-units</p>\n</blockquote>\n</li>\n<li><p>只显示服务单元的状态</p>\n<blockquote>\n<p>systemctl –type=service</p>\n</blockquote>\n</li>\n<li><p>显示sshd服务单元</p>\n<blockquote>\n<p>systemctl status sshd.service -l</p>\n</blockquote>\n</li>\n<li><p>验证sshd服务当前是否活动</p>\n<blockquote>\n<p>systemctl is-active sshd</p>\n</blockquote>\n</li>\n<li><p>列出所有服务状态的所有服务单元</p>\n<blockquote>\n<p>systemctl list-units –type=service </p>\n</blockquote>\n</li>\n<li><p>列出所有服务单元</p>\n<blockquote>\n<p>systemctl list-units –type=service –all</p>\n</blockquote>\n</li>\n<li><p>查看服务单元的启用和禁用状态</p>\n<blockquote>\n<p>systemctl list-unit-files –type=service</p>\n</blockquote>\n</li>\n<li><p>列出失败的服务</p>\n<blockquote>\n<p>systemctl –failed –type=service</p>\n</blockquote>\n</li>\n<li><p>列出依赖的单元</p>\n<blockquote>\n<p>systemctl listdependencies sshd</p>\n</blockquote>\n</li>\n<li><p>禁用network,使之不能自动启动，但手动可以</p>\n<blockquote>\n<p>systemctl disable network</p>\n</blockquote>\n</li>\n<li><p>启用network</p>\n<blockquote>\n<p>systemctl enable network </p>\n</blockquote>\n</li>\n<li><p>禁用network,使之不能手动或自动启动</p>\n<blockquote>\n<p>systemctl mask network</p>\n</blockquote>\n</li>\n<li><p>启用network</p>\n<blockquote>\n<p>systemctl unmask network</p>\n</blockquote>\n</li>\n</ul>\n<p><strong>运行级别</strong></p>\n<ul>\n<li><p>target units:</p>\n<blockquote>\n<p>unit配置文件: .target</p>\n<p>ls /usr/lib/systemd/system/*.target</p>\n<p>systemctl list-unit-files –type target –all</p>\n</blockquote>\n</li>\n<li><p>运行级别</p>\n<blockquote>\n<p>0 ==&gt; runlevel0.target,poweroff.target</p>\n<p>1 ==&gt; runlevel1.target,recue.target</p>\n<p>2 ==&gt; runlevel2.target,multi-user.target</p>\n<p>3 ==&gt; runlevel3.target,multi-user.target</p>\n<p>4 ==&gt; runlevel4.target,multi-user.target</p>\n<p>5 ==&gt; runlevel5.target,graphical.target</p>\n<p>6 ==&gt; runlevel6.target,reboot.target</p>\n</blockquote>\n</li>\n<li><p>查看依赖性:</p>\n<blockquote>\n<p>systemctl list-dependencies graphical.target</p>\n</blockquote>\n</li>\n<li><p>级别切换: init N  ==&gt; systemctl isolate name.target</p>\n<p>systemctl isolate multi-user.target</p>\n<p>注: 只有/lib/systemd/system/*.target文件中AllowIoslate=yes才能切换(修改文件需执行systemctl daemon-reload才能生效)</p>\n</li>\n<li><p>查看target;</p>\n<p>runlevel ; who -r</p>\n<p>systemctl list-units –type target</p>\n</li>\n<li><p>获取默认运行级别</p>\n<p>/etc/initab ==&gt; systemctl get-default</p>\n</li>\n<li><p>修改默认级别</p>\n<p>/etc/initab ==&gt; systemctl set-default name.target</p>\n<p>systemctl set-default multi-user.target</p>\n<p>ls -l  /etc/systemd/system/default.target</p>\n</li>\n</ul>\n<p><strong>other command</strong></p>\n<ul>\n<li><p>切换至紧急救援摸索</p>\n<blockquote>\n<p>systemctl rescue</p>\n</blockquote>\n</li>\n<li><p>切换至emergency模式</p>\n<blockquote>\n<p>systemctl energebcy</p>\n</blockquote>\n</li>\n<li><p>其他常用命令</p>\n<p>传统命令init,poweroff,halt,reboot都成为systemctl的软链接</p>\n<blockquote>\n<p>关机重启: systemctl halt|poweroff|reboot</p>\n<p>挂起: systemctl suspend</p>\n<p>休眠: systemctl hibernate</p>\n<p>休眠并挂起: systemctl hybrid-sleep</p>\n</blockquote>\n</li>\n</ul>\n<p><strong>Centos 7引导顺序</strong></p>\n<ul>\n<li>UEFI或BIOS初始化，运行POST开机自检</li>\n<li>选择启动设备</li>\n<li>引导装载程序，centos7是grub2</li>\n<li>加载装载程序的配置文件:/etc/grub.d/ /etc/default/grub/ /boot/grub2/grub.cfg</li>\n<li>加载initramfs驱动模块</li>\n<li>加载内核选项</li>\n<li>内核初始化,centos 7使用systemd代替init</li>\n<li>执行initrd.target所有单元,包括挂载/etc/fstab</li>\n<li>从initramfs根文件系统切换到磁盘跟目录</li>\n<li>systemd执行默认target配置,配置文件　/etc/systemd/system/default.target</li>\n<li>systemd执行sysinit.target初始化系统及basic.target准备操作系统</li>\n<li>systemd启动multi-user.target下的本机与服务器服务</li>\n<li>systemd执行multi-user.target下的/etc/rc.d/rd.local</li>\n<li>systemd执行mult-user.target下的getty.target及登陆服务</li>\n<li>systemd换行graphical需要的服务</li>\n</ul>\n<p><strong>centos 7口令破解</strong></p>\n<ul>\n<li>启动时e进入编辑模式</li>\n<li>在linux16后添加内核参数rd.break，然后ctrl +x</li>\n<li>mount -o remount,rw /sysroot</li>\n<li>chroot /sysroot</li>\n<li>passwd root</li>\n<li>touch /.autorelabel</li>\n<li>exit</li>\n</ul>\n<p><strong>修复grub2</strong></p>\n<ul>\n<li><p>修复主配置文件</p>\n<blockquote>\n<p>grub2-mkconfig &gt; /boot/grub2/grub.cfg</p>\n</blockquote>\n</li>\n<li><p>修复grub</p>\n<blockquote>\n<p>grub2-install /dev/sda bios</p>\n<p>grub2-install UEFI</p>\n</blockquote>\n</li>\n<li><p>调整默认启动内核</p>\n<blockquote>\n<p>vim /etc/default/grub</p>\n<p>GRUB_DEFAULT=0</p>\n</blockquote>\n<p>​</p>\n</li>\n</ul>\n","categories":[{"name":"Linux","path":"api/categories/Linux.json"}],"tags":[{"name":"Linux","path":"api/tags/Linux.json"}]}