{"title":"文件查找与解压缩","slug":"blog","date":"2017-04-18T06:14:08.000Z","updated":"2017-12-09T13:56:34.000Z","comments":true,"excerpt":"","content":"<h1 id=\"文件查找与解压缩\"><a href=\"#文件查找与解压缩\" class=\"headerlink\" title=\"文件查找与解压缩\"></a>文件查找与解压缩</h1><h2 id=\"Locate\"><a href=\"#Locate\" class=\"headerlink\" title=\"Locate\"></a>Locate</h2><p>查询系统上预建的文件索引数据库<br>/var/lib/mlocate/mlocate.db<br>依赖于事先构建的索引<br>索引的构建是在系统较为空闲时自动进行(周期性任务),管理员手动更新数据库(updatedb)<br>索引构建过程需要遍历整个根文件系统,极消耗资源</p>\n<pre><code>locate KEYWORD\n    -i 不区分大小写的搜索\n    -n N 之列举N个匹配项目\n    -r 使用Regex来搜索\n</code></pre><h2 id=\"Find\"><a href=\"#Find\" class=\"headerlink\" title=\"Find\"></a>Find</h2><p>find [OPTION]… [查找路径] [查找条件] [处理动作]<br>查找路径:指定具体目标路径;默认为当前目录<br>查找条件:指定的查找标准,可以文件名、大小、类型、权限等标准进行;默认为找出指定路径下的所有文件<br>处理动作:对符合条件的文件做操作,默认输出至屏幕<br>指搜索层级</p>\n<pre><code>-maxdepth level 最大搜索目录深度,指定目录为第1级\n-mindepth level 最大搜索目录深度\n</code></pre><p>根据文件名和inode查找:</p>\n<pre><code>-name &quot;文件名称&quot;:支持使用glob *, ?, [], [^]\n-iname &quot;文件名称&quot;:不区分字母大小写\n-inum n 按inode号查找\n-samefile name 相同inode号的文件\n-links n 链接数为n的文件\n-regex &quot;PATTERN&quot;:以PATTERN匹配整个文件路径字符串,而不仅仅是文件名称\n</code></pre><p>根据属主、属组查找:</p>\n<pre><code>-user USERNAME:查找属主为指定用户(UID)的文件\n-group GRPNAME: 查找属组为指定组(GID)的文件\n-uid UserID:查找属主为指定的UID号的文件\n-gid GroupID:查找属组为指定的GID号的文件\n-nouser:查找没有属主的文件\n-nogroup:查找没有属组的文件\n</code></pre><p>根据文件类型查找:</p>\n<pre><code>-type TYPE:\n• f: 普通文件\n• d: 目录文件\n• l: 符号链接文件\n• s:套接字文件\n• b: 块设备文件\n• c: 字符设备文件\n• p: 管道文件\n</code></pre><p> 组合条件:</p>\n<pre><code>与:-a\n或:-o\n非:-not, !\n</code></pre><p>德· 摩根定律:<br>(非 A) 或 (非 B) = 非(A 且 B)<br>(非 A) 且 (非 B) = 非(A 或 B)<br> 示例:<br>!A -a !B = !(A -o B)<br>!A -o !B = !(A -a B)</p>\n<p>根据权限查找:</p>\n<pre><code>-perm [/|-]MODE\nMODE: 精确权限匹配\n/MODE:任何一类(u,g,o)对象的权限中只要能一位匹配即可,或关系,+ 从centos7开始淘汰\n-MODE:每一类对象都必须同时拥有指定权限,与关系0 表示不关注\n• find -perm 755 会匹配权限模式恰好是755的文件\n• 只要当任意人有写权限时,find -perm +222就会匹配\n• 只有当每个人都有写权限时,find -perm -222才会匹配\n• 只有当其它人(other)有写权限时,find -perm -002才会匹配\n</code></pre><p>处理动作</p>\n<pre><code> -print:默认的处理动作,显示至屏幕\n -ls:类似于对查找到的文件执行“ls -l”命令\n -delete:删除查找到的文件\n -fls file:查找到的所有文件的长格式信息保存至指定文件中\n -ok COMMAND {} \\; 对查找到的每个文件执行由 COMMAND指定的命令,对于每个文件执行命令之前,\n -exec COMMAND {} \\; 对查找到的每个文件执行由COMMAND指定的命令\n {}: 用于引用查找到的文件名称自身\n find传递查找到的文件至后面指定的命令时,查找到所有符合条件的文件一次性传递给后面的命令都会交互式要求用户确认\n</code></pre><p>参数替换xargs</p>\n<pre><code>由于很多命令不支持管道|来传递参数,而日常工作中有这个必要,所以就有了xargs命令\nxargs用于产生某个命令的参数,xargs 可以读入 stdin 的数据,并且以空格符或回车符将 stdin 的数据分隔成为arguments\n注意:文件名或者是其他意义的名词内含有空格符的情况\n有些命令不能接受过多参数,命令执行可能会失败,xargs可以解决\n</code></pre><p> 示例:</p>\n<pre><code>ls f* |xargs rm\nfind /sbin -perm +700 |ls -l 这个命令是错误的\nfind /sbin -perm +7000 | xargs ls –l\nfind和xargs格式:find | xargs COMMAND\n</code></pre><h2 id=\"压缩、解压缩及归档工具\"><a href=\"#压缩、解压缩及归档工具\" class=\"headerlink\" title=\"压缩、解压缩及归档工具\"></a>压缩、解压缩及归档工具</h2><pre><code> file-roller\n compress/uncompress: .Z\n gzip/gunzip: .gz\n bzip2/bunzip2: .bz2\n xz/unxz: .xz\n zip/unzip\n tar\n cpio\n</code></pre><h3 id=\"compress-uncompress\"><a href=\"#compress-uncompress\" class=\"headerlink\" title=\"compress/uncompress\"></a>compress/uncompress</h3><p> compress [-dfvcVr] [-b maxbits] [file …]</p>\n<pre><code>-d: 解压缩,相当于uncompress\n-c: 结果输出至标准输出,不删除原文件\n-v: 显示详情\n</code></pre><p> uncompress 解压缩<br> zcat file.Z &gt;file</p>\n<h3 id=\"gzip-gunzip\"><a href=\"#gzip-gunzip\" class=\"headerlink\" title=\"gzip/gunzip\"></a>gzip/gunzip</h3><p>gzip [OPTION]… FILE …</p>\n<pre><code>-d: 解压缩,相当于gunzip\n-c: 将压缩或解压缩的结果输出至标准输出\n-#:1-9,指定压缩比,值越大压缩比越大\nzcat:不显式解压缩的前提下查看文本文件内容\n实例:\ngzip -c messages &gt;messages.gz\ngzip -c -d messages.gz &gt; messages\nzcat messages.gz &gt; messages\n</code></pre><h3 id=\"bzip2-bunzip2-bzcat\"><a href=\"#bzip2-bunzip2-bzcat\" class=\"headerlink\" title=\"bzip2/bunzip2/bzcat\"></a>bzip2/bunzip2/bzcat</h3><p>bzip2 [OPTION]… FILE …</p>\n<pre><code>-k: keep, 保留原文件\n-d:解压缩\n-#:1-9,压缩比,默认为6\n</code></pre><p>bzcat:不显式解压缩的前提下查看文本文件内容</p>\n<h3 id=\"xz-unxz-xzcat\"><a href=\"#xz-unxz-xzcat\" class=\"headerlink\" title=\"xz/unxz/xzcat\"></a>xz/unxz/xzcat</h3><p>xz [OPTION]… FILE …</p>\n<pre><code>-k: keep, 保留原文件\n-d:解压缩\n-#:1-9,压缩比,默认为6\n</code></pre><p>xzcat: 不显式解压缩的前提下查看文本文件内容</p>\n<h2 id=\"tar工具\"><a href=\"#tar工具\" class=\"headerlink\" title=\"tar工具\"></a>tar工具</h2><p>Tar(Tape ARchive,磁带归档的缩写)<br>tar [OPTION]…<br>(1) 创建归档<br>tar -c -f /PATH/TO/SOMEFILE.tar FILE…<br>(2) 追加文件至归档: 注:不支持对压缩文件追加<br>tar -r -f /PATH/TO/SOMEFILE.tar FILE…<br>(3) 查看归档文件中的文件列表<br>tar -t -f /PATH/TO/SOMEFILE.tar<br>(4) 展开归档<br>tar -x -f /PATH/TO/SOMEFILE.tar<br>tar -x -f /PATH/TO/SOMEFILE.tar -C /PATH/<br>(5) 结合压缩工具实现:归档并压缩<br>-j: bzip2, -z: gzip, -J: xz<br>-T选项指定输入文件,-X选项指定包含要排除的文件列表<br>tar zcvf mybackup.tgz -T /root/includefilelist -X<br>/root/excludefilelist<br>分割大的 tar 文件为多份小文件:<br>split –b Size –d tar-file-name prefix-name<br>split -b 1M –d mybackup.tgz mybackup-parts<br>split -b 1M mybackup.tgz mybackup-parts<br>合并:<br>cat mybackup-parts* &gt; mybackup.tar.gz</p>\n<h2 id=\"cpio\"><a href=\"#cpio\" class=\"headerlink\" title=\"cpio\"></a>cpio</h2><p>cpio命令是通过重定向的方式将文件打包备份，还原恢复的工具，它可以解压已”.cpio”结尾或者”.tar”<br>cpio [选项] &gt; 文件名或者设备名<br>cpio [选项] &lt; 文件名或者设备名<br>选项</p>\n<pre><code>-o 将文件拷贝打包成文件或者将文件输出到设备上\n-i 解包，将打包文件解压或将设备上的备份还原到系统\n-t 预览，查看文件内容或者输出到设备上的文件内容\n-v 显示打包过程中的文件名称\n-d 解包生产目录，在cpio还原时，自动的建立目录\n-c 一种较新的存储方式\n</code></pre><p>示例</p>\n<pre><code>将Etc目录备份\n    fin ./etc -print|cpio -ov &gt;etc.cpio\n内容预览\n    cpio -tv &lt; etc.cpio \n</code></pre>\n    <pre><code class=\"lang-shell\">    <span class=\"hljs-keyword\">ls</span> <span class=\"hljs-string\">/etc</span>\n    <span class=\"hljs-keyword\">pwd</span>\n    <span class=\"hljs-keyword\">ls</span>\n</code></pre>\n","categories":[{"name":"Linux","path":"api/categories/Linux.json"}],"tags":[{"name":"基础命令","path":"api/tags/基础命令.json"}]}