{"title":"nginx负载均衡","slug":"nginx负载均衡","date":"2017-05-15T08:20:11.000Z","updated":"2017-11-19T13:15:37.000Z","comments":true,"excerpt":"","content":"<h3 id=\"Nginx负载均衡\"><a href=\"#Nginx负载均衡\" class=\"headerlink\" title=\"Nginx负载均衡\"></a>Nginx负载均衡</h3><blockquote>\n<h4 id=\"四层\"><a href=\"#四层\" class=\"headerlink\" title=\"四层\"></a>四层</h4></blockquote>\n<p><strong>ngx_stream_core_module</strong></p>\n<ul>\n<li>配置 </li>\n</ul>\n<pre><code>注释nginx.conf下http上下文(:.,$s/^/#/g)\n加入sream\nstream {\n        upstream webs {\n                server 172.18.50.72:80;\n                server 172.18.50.73:80;\n        }\n        server {\n                listen 80;\n                proxy_pass webs;\n}\n</code></pre><p><strong>ngx_stream_core_module</strong></p>\n<blockquote>\n<p>The ngx_stream_proxy_module module (1.9.0) allows proxying data streams over TCP, UDP (1.9.13), and UNIX-domain sockets.</p>\n</blockquote>\n<ul>\n<li>proxy_pass address</li>\n</ul>\n<blockquote>\n<p>Sets the address of a proxied server. The address can be specified as a domain name or IP address, and a port or as a UNIX-domain socket path.    </p>\n</blockquote>\n<ul>\n<li>proxy_timeout timeout;</li>\n</ul>\n<blockquote>\n<p>Sets the timeout between two successive read or write operations on client or proxied server connections. If no data is transmitted within this time, the connection is closed.</p>\n</blockquote>\n<ul>\n<li>proxy_connect_timeout time</li>\n</ul>\n<blockquote>\n<p>设置nginx与被代理的服务器尝试建立连接的超时时长；默认为60s；</p>\n</blockquote>\n<pre><code>        示例：\n            stream {\n                upstream sshsrvs {\n                    server 192.168.10.130:22;\n                    server 192.168.10.131:22;\n                    hash $remote_addr consistent;\n                }\n\n                server {\n                    listen 172.16.100.6:22202;\n                    proxy_pass sshsrvs; \n                    proxy_timeout 60s;\n                    proxy_connect_timeout 10s;\n                }\n            }\n</code></pre><blockquote>\n<h4 id=\"七层\"><a href=\"#七层\" class=\"headerlink\" title=\"七层\"></a>七层</h4></blockquote>\n<p><strong>ngx_http_upstream_module</strong></p>\n<blockquote>\n<p>The ngx_http_upstream_module module is used to define groups of servers that can be referenced by the proxy_pass, fastcgi_pass, uwsgi_pass, scgi_pass, and memcached_pass directives.</p>\n</blockquote>\n<ul>\n<li><p>upstream name {…}</p>\n<blockquote>\n<p>定义后端服务器组;引入一个新的上下文;只能用于http{}上下文中;</p>\n<p>默认的调度方法是wrr;</p>\n</blockquote>\n</li>\n<li><p>server address [parameters]</p>\n<blockquote>\n<p>定义服务器地址和相关的参数</p>\n<p>​    地址格式：</p>\n<p>​        IP·[:PORT]</p>\n<p>​        HOSTNAME[:PORT]</p>\n<p>​        unix:/PATH/TO/SOME_SOCK_FILE</p>\n<p>​    参数:weight=number</p>\n<p>​            权重，默认为1;</p>\n<p>​    max_fails=number</p>\n<p>​        失败尝试的最大次数</p>\n<p>​    fail_timeout=time</p>\n<p>​        设置服务器为不可用状态的超时时长</p>\n<p>​    backup</p>\n<p>​        把服务器标记为备用状态</p>\n<p>​    down</p>\n<p>​        手动标记其为不可用</p>\n</blockquote>\n</li>\n<li><p>least_conn</p>\n<blockquote>\n<p>最少连接调度算法;当server拥有不同的权重时为wlc;当所有后端主机的连接数相同时，则使用wrr进行调度;</p>\n</blockquote>\n</li>\n<li><p>least_time header | last_byte</p>\n<blockquote>\n<p>最短平均响应时长和最少连接</p>\n<p>header:response_header</p>\n<p>last_byte:full_response</p>\n<p>仅Nginx Plus有效</p>\n</blockquote>\n</li>\n<li><p>ip_hash</p>\n<blockquote>\n<p>源地址hash算法;能够将来自同一个源ip地址的请求发往同一个upstream server;</p>\n</blockquote>\n</li>\n<li><p>hash key [consistent]</p>\n<blockquote>\n<p>基于指定的key的has表实现请求调度，此处的key可以文本、变量或二者的组合;</p>\n<p>consistent:参数，指定使用一致性hash算法;</p>\n<p>实例：</p>\n<p>​    hash $request_uri consitent</p>\n<p>​    hash $remote_addr</p>\n<p>​    hash $cookie_name</p>\n</blockquote>\n</li>\n<li><p>keepalive connections</p>\n<blockquote>\n<p>可使用长连接的连接数量</p>\n</blockquote>\n</li>\n<li><p>health_check [parameters]</p>\n<blockquote>\n<p>定义对后端主机的健康检测机制之;只能用于localtion上下文</p>\n<p>​    可用参数:</p>\n<p>​        interval=time:检测频率，默认为每隔5秒钟;</p>\n<p>​        fails=number:判断服务器状态为失败需要检测的次数;</p>\n<p>​        passes=number:判断服务器状态转为成功需要检测的次数</p>\n<p>​        uri=uri:判断其健康与否使用的uri</p>\n<p>​        match=name:基于制定的match来衡量检测结果的成败</p>\n<p>​        port=number:使用独立的端口进行检测</p>\n<p>​    仅Nginx Plus有效</p>\n</blockquote>\n</li>\n<li><p>match name {…}</p>\n<blockquote>\n<p>定义衡量某检测结果是否为成功的衡量机制</p>\n<p>专用机制：</p>\n<p>​    status CODE</p>\n<p>​    status !CODE</p>\n<p>​    …</p>\n<p>​    header:基于响应报文的首部进行判断</p>\n<p>​        header HEADER=VALUE</p>\n<p>​        header HEADER ~ VALUE</p>\n<p>​    body:基于响应保温的内容进行判断</p>\n<p>​        body ~ “PATTERN”</p>\n<p>​        body !~ “PATTERN”</p>\n<p>​    仅Nginx Plusu有效</p>\n</blockquote>\n</li>\n</ul>\n<p>示例</p>\n<pre><code>vim nginx.conf\nworker_processes  1;\nevents {\n    worker_connections  1024;\n}\nhttp {\n    keepalive_timeout  65;\n    include upstream.conf;\n} \nvim upstream.conf\nupstream debugo_servers {\n    server debugo03:80 weight=5;\n    server debugo04:80 weight=10;\n}\nserver {\n    listen    debugo01:80;\n    location / {\n        proxy_pass http://debugo_servers;\n    }\n}\n</code></pre>","categories":[],"tags":[{"name":"nginx","path":"api/tags/nginx.json"},{"name":"负载均衡","path":"api/tags/负载均衡.json"}]}